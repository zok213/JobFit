import { NextRequest, NextResponse } from "next/server";
import { marked } from "marked"; // Th√™m th∆∞ vi·ªán marked ƒë·ªÉ chuy·ªÉn ƒë·ªïi markdown sang HTML

// API route ƒë·ªÉ t∆∞∆°ng t√°c tr·ª±c ti·∫øp v·ªõi Jina AI API
export async function POST(req: NextRequest) {
  try {
    // L·∫•y d·ªØ li·ªáu t·ª´ request body
    const data = await req.json();
    console.log(
      "üöÄ API route received request:",
      data.chatInput.substring(0, 100) + "..."
    );

    try {
      // G·ªçi tr·ª±c ti·∫øp ƒë·∫øn Jina AI DeepSearch API thay v√¨ qua Python proxy
      console.log("üîå Connecting directly to Jina AI API");

      const jinaApiKey =
        "jina_6849ca29ece94fda8e4266c14764c40dTky_rfQjF8-aRKKXzbnSkJwgfYUc";

      // C·∫•u tr√∫c payload cho API
      const payload = {
        model: "jina-deepsearch-v1",
        messages: [
          {
            role: "user",
            content: `T·∫°o m·ªôt l·ªô tr√¨nh chi ti·∫øt d·ª±a tr√™n ƒë·ªÅ t√†i: "${data.chatInput}". 
C·∫•u tr√∫c l·ªô tr√¨nh c·∫ßn c√≥:

1. Ti√™u ƒë·ªÅ ch√≠nh m√¥ t·∫£ l·ªô tr√¨nh
2. Gi·ªõi thi·ªáu ng·∫Øn g·ªçn v·ªÅ l·ªô tr√¨nh
3. C√°c giai ƒëo·∫°n ph√°t tri·ªÉn (√≠t nh·∫•t 4 giai ƒëo·∫°n), m·ªói giai ƒëo·∫°n c·∫ßn c√≥:
   - Ti√™u ƒë·ªÅ giai ƒëo·∫°n v√† khung th·ªùi gian
   - M√¥ t·∫£ r√µ r√†ng v·ªÅ m·ª•c ti√™u c·ªßa giai ƒëo·∫°n
   - Danh s√°ch c√°c k·ªπ nƒÉng c·ªët l√µi c·∫ßn ph√°t tri·ªÉn (3-5 k·ªπ nƒÉng)
   - V·ªõi M·ªñI k·ªπ nƒÉng, cung c·∫•p 1 link c·ª• th·ªÉ ƒë·∫øn ngu·ªìn h·ªçc t·∫≠p ch·∫•t l∆∞·ª£ng
   - Danh s√°ch ngu·ªìn h·ªçc t·∫≠p khuy·∫øn ngh·ªã (3-5 ngu·ªìn), bao g·ªìm:
     * Kh√≥a h·ªçc online (k√®m link c·ª• th·ªÉ ƒë·∫øn t·ª´ng kh√≥a h·ªçc)
     * S√°ch v√† t√†i li·ªáu (k√®m link mua ho·∫∑c ƒë·ªçc online)
     * D·ª± √°n th·ª±c h√†nh (m√¥ t·∫£ ng·∫Øn g·ªçn v√† link ƒë·∫øn h∆∞·ªõng d·∫´n n·∫øu c√≥)
   - C√°c c·ªôt m·ªëc quan tr·ªçng c·∫ßn ƒë·∫°t ƒë∆∞·ª£c trong giai ƒëo·∫°n

4. L·ªùi khuy√™n b·ªï sung v√† h∆∞·ªõng ph√°t tri·ªÉn ti·∫øp theo

ƒê·∫£m b·∫£o m·ªói link ƒë·ªÅu l√† link th·ª±c t·∫ø ƒë·∫øn trang web ch√≠nh th·ª©c, kh√¥ng s·ª≠ d·ª•ng link gi·∫£. V·ªõi kh√≥a h·ªçc, ∆∞u ti√™n c√°c ngu·ªìn n·ªïi ti·∫øng nh∆∞ Coursera, Udemy, edX, v.v.
Format k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng Markdown v·ªõi c√°c ti√™u ƒë·ªÅ, danh s√°ch c√≥ ƒë√°nh d·∫•u, v√† links ƒë∆∞·ª£c nh√∫ng ƒë√∫ng c√°ch.`,
          },
        ],
        stream: false,
        temperature: 0.7,
      };

      // G·ªçi ƒë·∫øn Jina AI API
      const response = await fetch(
        "https://deepsearch.jina.ai/v1/chat/completions",
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
            Authorization: `Bearer ${jinaApiKey}`,
            "User-Agent": "Mozilla/5.0",
          },
          body: JSON.stringify(payload),
          // Th√™m timeout ƒë·ªÉ tr√°nh ch·ªù qu√° l√¢u
          signal: AbortSignal.timeout(120000), // 120 gi√¢y timeout
        }
      );

      // Ki·ªÉm tra n·∫øu response kh√¥ng th√†nh c√¥ng
      if (!response.ok) {
        const errorText = await response.text();
        console.error("‚ùå Jina AI API error:", response.status, errorText);

        // S·ª≠ d·ª•ng backend Python nh∆∞ fallback
        console.log("‚ö†Ô∏è Falling back to Python backend proxy");
        return await callPythonBackend(data);
      }

      // X·ª≠ l√Ω k·∫øt qu·∫£ t·ª´ Jina AI API
      const jinaResult = await response.json();
      console.log("‚úÖ Received response from Jina AI API");

      // Tr√≠ch xu·∫•t n·ªôi dung
      let content = "";
      if (jinaResult.choices && jinaResult.choices.length > 0) {
        const choice = jinaResult.choices[0];
        if (choice.message && choice.message.content) {
          content = choice.message.content;
        } else if (choice.text) {
          content = choice.text;
        }
      }

      if (!content) {
        console.error("‚ùå No content found in Jina AI response, falling back");
        return await callPythonBackend(data);
      }

      // Chuy·ªÉn ƒë·ªïi markdown sang HTML
      try {
        // S·ª≠ d·ª•ng marked ƒë·ªÉ chuy·ªÉn ƒë·ªïi markdown sang HTML v·ªõi cast ƒë·ªÉ tr√°nh l·ªói ki·ªÉu
        const html = marked.parse(content as string);
        const enhancedHtml = addStylesToHTML(html);

        // Tr·∫£ v·ªÅ c·∫£ hai ƒë·ªãnh d·∫°ng markdown v√† HTML
        console.log("üì§ Returning content to frontend");
        return NextResponse.json({
          text: content, // V·∫´n gi·ªØ phi√™n b·∫£n markdown ƒë·ªÉ t∆∞∆°ng th√≠ch ng∆∞·ª£c
          html: enhancedHtml, // Th√™m phi√™n b·∫£n HTML
          nonce: String(Date.now()),
        });
      } catch (error) {
        console.error("‚ùå Error converting markdown to HTML:", error);
        // N·∫øu c√≥ l·ªói khi chuy·ªÉn ƒë·ªïi HTML, v·∫´n tr·∫£ v·ªÅ markdown
        return NextResponse.json({
          text: content,
          nonce: String(Date.now()),
        });
      }
    } catch (error) {
      console.error("üí• Error connecting to Jina AI directly:", error);
      console.log("‚ö†Ô∏è Falling back to Python backend proxy");

      // Fallback t·ªõi backend Python n·∫øu c√≥ l·ªói
      return await callPythonBackend(data);
    }
  } catch (error) {
    console.error("üí• API route error:", error);
    return NextResponse.json(
      {
        error:
          error instanceof Error ? error.message : "Unknown error occurred",
      },
      { status: 500 }
    );
  }
}

// H√†m th√™m style ƒë·∫∑c bi·ªát cho HTML ƒë·ªÉ l√†m n·ªïi b·∫≠t links
function addStylesToHTML(html: string): string {
  // Th√™m CSS v√† c√°c style c·∫ßn thi·∫øt
  return `
    <div class="roadmap-content">
      <style>
        .roadmap-content h1 {
          font-size: 1.75rem;
          font-weight: 700;
          margin-bottom: 1.5rem;
          color: #171717;
          border-bottom: 2px solid #d9f99d;
          padding-bottom: 0.5rem;
        }
        .roadmap-content h2 {
          font-size: 1.5rem;
          font-weight: 600;
          margin-top: 2rem;
          margin-bottom: 1rem;
          color: #171717;
          border-left: 4px solid #a3e635;
          padding-left: 0.75rem;
        }
        .roadmap-content h3 {
          font-size: 1.25rem;
          font-weight: 600;
          margin-top: 1.5rem;
          color: #404040;
        }
        .roadmap-content ul {
          margin-top: 1rem;
          margin-bottom: 1rem;
          list-style-type: disc;
          padding-left: 1.5rem;
        }
        .roadmap-content li {
          margin-bottom: 0.5rem;
          line-height: 1.6;
        }
        .roadmap-content a {
          color: #65a30d;
          text-decoration: none;
          font-weight: 500;
          padding: 0.1rem 0.3rem;
          background-color: #f7fee7;
          border-radius: 0.25rem;
          transition: all 0.2s ease;
        }
        .roadmap-content a:hover {
          color: #4d7c0f;
          background-color: #ecfccb;
        }
        .roadmap-content p {
          margin-bottom: 1rem;
          line-height: 1.7;
        }
        .roadmap-content strong {
          font-weight: 600;
          color: #171717;
        }
        .roadmap-content blockquote {
          border-left: 3px solid #a3e635;
          padding-left: 1rem;
          margin-left: 0;
          color: #525252;
          font-style: italic;
          margin: 1.5rem 0;
        }
        .roadmap-content code {
          background: #f5f5f5;
          padding: 0.2rem 0.4rem;
          border-radius: 3px;
          font-size: 0.9em;
          font-family: Consolas, Monaco, 'Andale Mono', monospace;
        }
        .roadmap-content pre {
          background: #f8f8f8;
          padding: 1rem;
          border-radius: 4px;
          overflow-x: auto;
          margin: 1.5rem 0;
        }
        .roadmap-content pre code {
          background: transparent;
          padding: 0;
        }
        .roadmap-content img {
          max-width: 100%;
          border-radius: 4px;
          margin: 1.5rem 0;
        }
        .roadmap-content hr {
          border: 0;
          height: 1px;
          background: #d9f99d;
          margin: 2rem 0;
        }
        .roadmap-content table {
          width: 100%;
          border-collapse: collapse;
          margin: 1.5rem 0;
        }
        .roadmap-content th {
          background: #f7fee7;
          padding: 0.5rem;
          border: 1px solid #d9f99d;
          font-weight: 600;
        }
        .roadmap-content td {
          padding: 0.5rem;
          border: 1px solid #e5e5e5;
        }
        .roadmap-content tr:nth-child(even) {
          background: #fafafa;
        }
        @media print {
          .roadmap-content {
            font-size: 12pt;
          }
          .roadmap-content h1 {
            font-size: 18pt;
          }
          .roadmap-content h2 {
            font-size: 16pt;
          }
          .roadmap-content h3 {
            font-size: 14pt;
          }
        }
      </style>
      ${html}
    </div>
  `;
}

// H√†m g·ªçi ƒë·∫øn Python backend nh∆∞ fallback
async function callPythonBackend(data: any) {
  // L·∫•y URL Python API t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
  const apiUrl = process.env.NEXT_PUBLIC_API_URL || "http://localhost:8000";
  console.log("üîå Connecting to Python API at:", apiUrl);

  // G·ªçi ƒë·∫øn Python API server
  const response = await fetch(`${apiUrl}/api/roadmap/generate`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      chatInput: data.chatInput,
    }),
    // Th√™m timeout ƒë·ªÉ tr√°nh ch·ªù qu√° l√¢u
    signal: AbortSignal.timeout(60000), // 60 gi√¢y timeout
  });

  // Ki·ªÉm tra n·∫øu response kh√¥ng th√†nh c√¥ng
  if (!response.ok) {
    const errorText = await response.text();
    console.error("‚ùå Python API error:", response.status, errorText);
    return NextResponse.json(
      { error: `API responded with status ${response.status}: ${errorText}` },
      { status: response.status }
    );
  }

  // Tr·∫£ v·ªÅ k·∫øt qu·∫£ cho frontend
  const result = await response.json();
  console.log(
    "‚úÖ Received response from Python API:",
    result.text ? `${result.text.substring(0, 100)}...` : "No text in response"
  );

  // Th·ª≠ chuy·ªÉn ƒë·ªïi markdown sang HTML
  try {
    const html = marked.parse(result.text as string);
    result.html = addStylesToHTML(html);
  } catch (error) {
    console.error("Error converting markdown to HTML in fallback:", error);
    // Kh√¥ng c√≥ HTML, frontend s·∫Ω s·ª≠ d·ª•ng markdown
  }

  return NextResponse.json(result);
}
