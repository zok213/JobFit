from fastapi import APIRouter, Depends, HTTPException, Body, Query
from typing import List, Dict, Any, Optional
from pydantic import BaseModel, Field
from enum import Enum
import logging

from Backend.db.database import get_db, get_mongodb
from Backend.api.auth_supabase import get_current_user_supabase
from Backend.services.ai_service import ai_service, AIModelProvider
from Backend.models.user import User

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = APIRouter()

class GenerateTextRequest(BaseModel):
    """Request model for text generation"""
    prompt: str = Field(..., description="The prompt to generate text for")
    provider: Optional[str] = Field(None, description="AI provider to use (openai, gemini, openrouter, huggingface)")
    model: Optional[str] = Field(None, description="Specific model to use")
    max_tokens: Optional[int] = Field(1000, description="Maximum number of tokens to generate")
    temperature: Optional[float] = Field(0.7, description="Temperature for generation")

class GenerateEmbeddingRequest(BaseModel):
    """Request model for text embedding"""
    text: str = Field(..., description="The text to generate embeddings for")
    provider: Optional[str] = Field(None, description="AI provider to use (openai, huggingface)")
    model: Optional[str] = Field(None, description="Specific model to use")

@router.get("/providers", response_model=List[str])
async def list_providers(
    current_user: User = Depends(get_current_user_supabase)
):
    """List available AI providers"""
    providers = ai_service.list_available_providers()
    return providers

@router.post("/generate", response_model=Dict[str, Any])
async def generate_text(
    request: GenerateTextRequest,
    current_user: User = Depends(get_current_user_supabase)
):
    """Generate text using AI"""
    try:
        provider = None
        if request.provider:
            try:
                provider = AIModelProvider(request.provider)
            except ValueError:
                raise HTTPException(status_code=400, detail=f"Invalid provider: {request.provider}")
        
        result = await ai_service.generate_text(
            prompt=request.prompt,
            provider=provider,
            model=request.model,
            max_tokens=request.max_tokens,
            temperature=request.temperature
        )
        
        if "error" in result:
            raise HTTPException(status_code=400, detail=result["error"])
        
        # Store the generation in MongoDB for analytics
        try:
            db = get_mongodb()
            db.ai_generations.insert_one({
                "user_id": str(current_user.id),
                "timestamp": None,  # Auto-generated by MongoDB
                "prompt": request.prompt,
                "provider": result.get("provider"),
                "model": result.get("model"),
                "tokens": result.get("tokens"),
                "success": True
            })
        except Exception as e:
            logger.error(f"Error logging AI generation to MongoDB: {str(e)}")
        
        return result
    
    except Exception as e:
        logger.error(f"Error generating text: {str(e)}")
        # Log the error to MongoDB
        try:
            db = get_mongodb()
            db.ai_generations.insert_one({
                "user_id": str(current_user.id),
                "timestamp": None,  # Auto-generated by MongoDB
                "prompt": request.prompt,
                "provider": request.provider,
                "model": request.model,
                "error": str(e),
                "success": False
            })
        except Exception as mongo_err:
            logger.error(f"Error logging AI error to MongoDB: {str(mongo_err)}")
            
        raise HTTPException(status_code=500, detail=f"Generation failed: {str(e)}")

@router.post("/embed", response_model=Dict[str, Any])
async def embed_text(
    request: GenerateEmbeddingRequest,
    current_user: User = Depends(get_current_user_supabase)
):
    """Generate embeddings for text"""
    try:
        provider = None
        if request.provider:
            try:
                provider = AIModelProvider(request.provider)
            except ValueError:
                raise HTTPException(status_code=400, detail=f"Invalid provider: {request.provider}")
        
        result = await ai_service.embed_text(
            text=request.text,
            provider=provider,
            model=request.model
        )
        
        if "error" in result:
            raise HTTPException(status_code=400, detail=result["error"])
        
        return result
    
    except Exception as e:
        logger.error(f"Error generating embeddings: {str(e)}")
        raise HTTPException(status_code=500, detail=f"Embedding failed: {str(e)}") 