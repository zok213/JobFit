--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE anon;
ALTER ROLE anon WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticated;
ALTER ROLE authenticated WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticator;
ALTER ROLE authenticator WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE dashboard_user;
ALTER ROLE dashboard_user WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB NOLOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE pgbouncer;
ALTER ROLE pgbouncer WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyholder;
ALTER ROLE pgsodium_keyholder WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keyiduser;
ALTER ROLE pgsodium_keyiduser WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE pgsodium_keymaker;
ALTER ROLE pgsodium_keymaker WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE service_role;
ALTER ROLE service_role WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_admin;
ALTER ROLE supabase_admin WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE supabase_auth_admin;
ALTER ROLE supabase_auth_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_read_only_user;
ALTER ROLE supabase_read_only_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_realtime_admin;
ALTER ROLE supabase_realtime_admin WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_replication_admin;
ALTER ROLE supabase_replication_admin WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE supabase_storage_admin;
ALTER ROLE supabase_storage_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;

--
-- User Configurations
--

--
-- User Config "anon"
--

ALTER ROLE anon SET statement_timeout TO '3s';

--
-- User Config "authenticated"
--

ALTER ROLE authenticated SET statement_timeout TO '8s';

--
-- User Config "authenticator"
--

ALTER ROLE authenticator SET session_preload_libraries TO 'safeupdate';
ALTER ROLE authenticator SET statement_timeout TO '8s';
ALTER ROLE authenticator SET lock_timeout TO '8s';

--
-- User Config "postgres"
--

ALTER ROLE postgres SET search_path TO E'\\$user', 'public', 'extensions';

--
-- User Config "supabase_admin"
--

ALTER ROLE supabase_admin SET search_path TO '$user', 'public', 'auth', 'extensions';
ALTER ROLE supabase_admin SET log_statement TO 'none';

--
-- User Config "supabase_auth_admin"
--

ALTER ROLE supabase_auth_admin SET search_path TO 'auth';
ALTER ROLE supabase_auth_admin SET idle_in_transaction_session_timeout TO '60000';
ALTER ROLE supabase_auth_admin SET log_statement TO 'none';

--
-- User Config "supabase_storage_admin"
--

ALTER ROLE supabase_storage_admin SET search_path TO 'storage';
ALTER ROLE supabase_storage_admin SET log_statement TO 'none';


--
-- Role memberships
--

GRANT anon TO authenticator GRANTED BY postgres;
GRANT anon TO postgres GRANTED BY supabase_admin;
GRANT authenticated TO authenticator GRANTED BY postgres;
GRANT authenticated TO postgres GRANTED BY supabase_admin;
GRANT authenticator TO supabase_storage_admin GRANTED BY supabase_admin;
GRANT pg_monitor TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO supabase_read_only_user GRANTED BY postgres;
GRANT pg_signal_backend TO postgres GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keyholder TO service_role GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keyholder GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO pgsodium_keymaker GRANTED BY supabase_admin;
GRANT pgsodium_keyiduser TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT pgsodium_keymaker TO postgres WITH ADMIN OPTION GRANTED BY supabase_admin;
GRANT service_role TO authenticator GRANTED BY postgres;
GRANT service_role TO postgres GRANTED BY supabase_admin;
GRANT supabase_auth_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_realtime_admin TO postgres GRANTED BY supabase_admin;
GRANT supabase_storage_admin TO postgres GRANTED BY supabase_admin;






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.12 (Debian 15.12-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.12 (Debian 15.12-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: auxiliary_domain; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA auxiliary_domain;


ALTER SCHEMA auxiliary_domain OWNER TO postgres;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: job_domain; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA job_domain;


ALTER SCHEMA job_domain OWNER TO postgres;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: pgsodium; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA pgsodium;


ALTER SCHEMA pgsodium OWNER TO supabase_admin;

--
-- Name: pgsodium; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgsodium WITH SCHEMA pgsodium;


--
-- Name: EXTENSION pgsodium; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgsodium IS 'Pgsodium is a modern cryptography library for Postgres.';


--
-- Name: rbac; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA rbac;


ALTER SCHEMA rbac OWNER TO postgres;

--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: resume_domain; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA resume_domain;


ALTER SCHEMA resume_domain OWNER TO postgres;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: user_domain; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA user_domain;


ALTER SCHEMA user_domain OWNER TO postgres;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: application_status; Type: TYPE; Schema: job_domain; Owner: postgres
--

CREATE TYPE job_domain.application_status AS ENUM (
    'applied',
    'reviewing',
    'shortlisted',
    'interviewed',
    'offered',
    'rejected',
    'withdrawn'
);


ALTER TYPE job_domain.application_status OWNER TO postgres;

--
-- Name: experience_level; Type: TYPE; Schema: job_domain; Owner: postgres
--

CREATE TYPE job_domain.experience_level AS ENUM (
    'entry',
    'junior',
    'mid',
    'senior',
    'lead',
    'executive'
);


ALTER TYPE job_domain.experience_level OWNER TO postgres;

--
-- Name: job_type; Type: TYPE; Schema: job_domain; Owner: postgres
--

CREATE TYPE job_domain.job_type AS ENUM (
    'full_time',
    'part_time',
    'contract',
    'internship',
    'freelance',
    'temporary',
    'executive'
);


ALTER TYPE job_domain.job_type OWNER TO postgres;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: user_role; Type: TYPE; Schema: user_domain; Owner: postgres
--

CREATE TYPE user_domain.user_role AS ENUM (
    'admin',
    'employee',
    'employer'
);


ALTER TYPE user_domain.user_role OWNER TO postgres;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: is_admin(); Type: FUNCTION; Schema: auth; Owner: postgres
--

CREATE FUNCTION auth.is_admin() RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN auth.jwt() ->> 'user_role' = 'admin';
END;
$$;


ALTER FUNCTION auth.is_admin() OWNER TO postgres;

--
-- Name: is_employee(); Type: FUNCTION; Schema: auth; Owner: postgres
--

CREATE FUNCTION auth.is_employee() RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN auth.jwt() ->> 'user_role' = 'employee';
END;
$$;


ALTER FUNCTION auth.is_employee() OWNER TO postgres;

--
-- Name: is_employer(); Type: FUNCTION; Schema: auth; Owner: postgres
--

CREATE FUNCTION auth.is_employer() RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN auth.jwt() ->> 'user_role' = 'employer';
END;
$$;


ALTER FUNCTION auth.is_employer() OWNER TO postgres;

--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: user_role(text); Type: FUNCTION; Schema: auth; Owner: postgres
--

CREATE FUNCTION auth.user_role(role_name text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1
    FROM rbac.user_roles ur
    JOIN rbac.roles r ON r.id = ur.role_id
    WHERE 
      ur.user_id = auth.uid() 
      AND r.name = role_name
      AND r.active = true
      AND r.deleted_at IS NULL
      AND ur.deleted_at IS NULL
  );
END;
$$;


ALTER FUNCTION auth.user_role(role_name text) OWNER TO postgres;

--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: postgres
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    IF EXISTS (
      SELECT FROM pg_extension
      WHERE extname = 'pg_net'
      -- all versions in use on existing projects as of 2025-02-20
      -- version 0.12.0 onwards don't need these applied
      AND extversion IN ('0.2', '0.6', '0.7', '0.7.1', '0.8', '0.10.0', '0.11.0')
    ) THEN
      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

      REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
      REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

      GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
      GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    END IF;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO postgres;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: postgres
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: check_job_applicant_role(); Type: FUNCTION; Schema: job_domain; Owner: postgres
--

CREATE FUNCTION job_domain.check_job_applicant_role() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    if not exists (select 1 from user_domain.users where id = new.user_id and role = 'employee') then
        raise exception 'only users with employee role can apply for jobs';
    end if;
    return new;
end;
$$;


ALTER FUNCTION job_domain.check_job_applicant_role() OWNER TO postgres;

--
-- Name: check_job_poster_role(); Type: FUNCTION; Schema: job_domain; Owner: postgres
--

CREATE FUNCTION job_domain.check_job_poster_role() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    if not exists (select 1 from user_domain.users where id = new.posted_by and (role = 'employer' or role = 'admin')) then
        raise exception 'only users with employer or admin role can post jobs';
    end if;
    return new;
end;
$$;


ALTER FUNCTION job_domain.check_job_poster_role() OWNER TO postgres;

--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: supabase_admin
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RAISE WARNING 'PgBouncer auth request: %', p_usename;

    RETURN QUERY
    SELECT usename::TEXT, passwd::TEXT FROM pg_catalog.pg_shadow
    WHERE usename = p_usename;
END;
$$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO supabase_admin;

--
-- Name: create_profile_for_user(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_profile_for_user() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    INSERT INTO profiles (user_id, bio, profile_picture)
    VALUES (NEW.id, '', '');
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.create_profile_for_user() OWNER TO postgres;

--
-- Name: custom_access_token_hook(jsonb); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.custom_access_token_hook(event jsonb) RETURNS jsonb
    LANGUAGE plpgsql STABLE
    AS $$
DECLARE
  claims jsonb;
  user_role text;
BEGIN
  -- Get the user's primary role from the user_roles table
  SELECT r.name INTO user_role 
  FROM rbac.user_roles ur
  JOIN rbac.roles r ON r.id = ur.role_id
  WHERE ur.user_id = (event->>'user_id')::uuid
  AND ur.deleted_at IS NULL
  AND r.active = true
  AND r.deleted_at IS NULL
  ORDER BY r.name = 'admin' DESC, r.name = 'employer' DESC, r.name = 'employee' DESC
  LIMIT 1;

  claims := event->'claims';
  
  IF user_role IS NOT NULL THEN
    -- Set the user_role claim in the JWT
    claims := jsonb_set(claims, '{user_role}', to_jsonb(user_role));
  ELSE
    claims := jsonb_set(claims, '{user_role}', 'null'::jsonb);
  END IF;
  
  -- Update the claims object in the original event
  event := jsonb_set(event, '{claims}', claims);
  
  -- Return the modified event
  return event;
END;
$$;


ALTER FUNCTION public.custom_access_token_hook(event jsonb) OWNER TO postgres;

--
-- Name: get_user_followers_count(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_user_followers_count(user_id uuid) RETURNS integer
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN (SELECT COUNT(*) FROM followers WHERE followed_id = user_id);
END;
$$;


ALTER FUNCTION public.get_user_followers_count(user_id uuid) OWNER TO postgres;

--
-- Name: get_user_following_count(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_user_following_count(user_id uuid) RETURNS integer
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN (SELECT COUNT(*) FROM followers WHERE follower_id = user_id);
END;
$$;


ALTER FUNCTION public.get_user_following_count(user_id uuid) OWNER TO postgres;

--
-- Name: get_user_posts_count(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_user_posts_count(user_id uuid) RETURNS integer
    LANGUAGE plpgsql
    AS $$
BEGIN
    RETURN (SELECT COUNT(*) FROM posts WHERE user_id = user_id);
END;
$$;


ALTER FUNCTION public.get_user_posts_count(user_id uuid) OWNER TO postgres;

--
-- Name: get_users_with_roles(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_users_with_roles() RETURNS SETOF jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN QUERY
  SELECT 
    jsonb_build_object(
      'id', u.id,
      'email', u.email,
      'roles', COALESCE(
        (
          SELECT jsonb_agg(
            jsonb_build_object(
              'id', r.id,
              'name', r.name,
              'description', r.description
            )
          )
          FROM rbac.user_roles ur
          JOIN rbac.roles r ON r.id = ur.role_id
          WHERE ur.user_id = u.id
          AND ur.deleted_at IS NULL
          AND r.deleted_at IS NULL
          AND r.active = true
        ),
        '[]'::jsonb
      )
    )
  FROM auth.users u
  ORDER BY u.email;
END;
$$;


ALTER FUNCTION public.get_users_with_roles() OWNER TO postgres;

--
-- Name: handle_new_user(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.handle_new_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin
    insert into user_domain.users (id, username, role)
    values (new.id, new.email, 'employee');
    return new;
end;
$$;


ALTER FUNCTION public.handle_new_user() OWNER TO postgres;

--
-- Name: log_user_action(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.log_user_action() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    INSERT INTO logs (user_id, action, created_at)
    VALUES (auth.uid(), TG_TABLE_NAME || ' ' || TG_OP, CURRENT_TIMESTAMP);
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.log_user_action() OWNER TO postgres;

--
-- Name: toggle_like(integer); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.toggle_like(post_id integer) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    like_exists BOOLEAN;
BEGIN
    SELECT EXISTS(
        SELECT 1 FROM likes 
        WHERE post_id = toggle_like.post_id AND user_id = auth.uid()
    ) INTO like_exists;
    
    IF like_exists THEN
        DELETE FROM likes 
        WHERE post_id = toggle_like.post_id AND user_id = auth.uid();
        RETURN FALSE;
    ELSE
        INSERT INTO likes (post_id, user_id) 
        VALUES (toggle_like.post_id, auth.uid());
        RETURN TRUE;
    END IF;
END;
$$;


ALTER FUNCTION public.toggle_like(post_id integer) OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  BEGIN
    -- Set the topic configuration
    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);

    -- Attempt to insert the message
    INSERT INTO realtime.messages (payload, event, topic, private, extension)
    VALUES (payload, event, topic, private, 'broadcast');
  EXCEPTION
    WHEN OTHERS THEN
      -- Capture and notify the error
      PERFORM pg_notify(
          'realtime:system',
          jsonb_build_object(
              'error', SQLERRM,
              'function', 'realtime.send',
              'event', event,
              'topic', topic,
              'private', private
          )::text
      );
  END;
END;
$$;


ALTER FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

--
-- Name: check_admin_role(); Type: FUNCTION; Schema: user_domain; Owner: postgres
--

CREATE FUNCTION user_domain.check_admin_role() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    if not exists (select 1 from user_domain.users where id = new.user_id and role = 'admin') then
        raise exception 'only users with admin role can have admin permissions';
    end if;
    return new;
end;
$$;


ALTER FUNCTION user_domain.check_admin_role() OWNER TO postgres;

--
-- Name: create_user_profile(); Type: FUNCTION; Schema: user_domain; Owner: postgres
--

CREATE FUNCTION user_domain.create_user_profile() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin
    insert into user_domain.user_profiles (user_id)
    values (new.id);
    return new;
end;
$$;


ALTER FUNCTION user_domain.create_user_profile() OWNER TO postgres;

--
-- Name: create_user_settings(); Type: FUNCTION; Schema: user_domain; Owner: postgres
--

CREATE FUNCTION user_domain.create_user_settings() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin
    insert into user_domain.user_settings (user_id)
    values (new.id);
    return new;
end;
$$;


ALTER FUNCTION user_domain.create_user_settings() OWNER TO postgres;

--
-- Name: secrets_encrypt_secret_secret(); Type: FUNCTION; Schema: vault; Owner: supabase_admin
--

CREATE FUNCTION vault.secrets_encrypt_secret_secret() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
		BEGIN
		        new.secret = CASE WHEN new.secret IS NULL THEN NULL ELSE
			CASE WHEN new.key_id IS NULL THEN NULL ELSE pg_catalog.encode(
			  pgsodium.crypto_aead_det_encrypt(
				pg_catalog.convert_to(new.secret, 'utf8'),
				pg_catalog.convert_to((new.id::text || new.description::text || new.created_at::text || new.updated_at::text)::text, 'utf8'),
				new.key_id::uuid,
				new.nonce
			  ),
				'base64') END END;
		RETURN new;
		END;
		$$;


ALTER FUNCTION vault.secrets_encrypt_secret_secret() OWNER TO supabase_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text,
    web_authn_session_data jsonb
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone,
    web_authn_credential jsonb,
    web_authn_aaguid uuid
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: job_application_history; Type: TABLE; Schema: job_domain; Owner: postgres
--

CREATE TABLE job_domain.job_application_history (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    application_id uuid,
    status job_domain.application_status NOT NULL,
    notes text,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE job_domain.job_application_history OWNER TO postgres;

--
-- Name: TABLE job_application_history; Type: COMMENT; Schema: job_domain; Owner: postgres
--

COMMENT ON TABLE job_domain.job_application_history IS 'historical record of job application status changes';


--
-- Name: job_applications; Type: TABLE; Schema: job_domain; Owner: postgres
--

CREATE TABLE job_domain.job_applications (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    job_id uuid,
    user_id uuid,
    resume_id uuid,
    status job_domain.application_status DEFAULT 'applied'::job_domain.application_status,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE job_domain.job_applications OWNER TO postgres;

--
-- Name: TABLE job_applications; Type: COMMENT; Schema: job_domain; Owner: postgres
--

COMMENT ON TABLE job_domain.job_applications IS 'job applications submitted by users';


--
-- Name: job_descriptions; Type: TABLE; Schema: job_domain; Owner: postgres
--

CREATE TABLE job_domain.job_descriptions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    job_id uuid,
    description text,
    salary_min integer,
    salary_max integer,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT valid_salary_range CHECK (((salary_max IS NULL) OR (salary_min <= salary_max)))
);


ALTER TABLE job_domain.job_descriptions OWNER TO postgres;

--
-- Name: TABLE job_descriptions; Type: COMMENT; Schema: job_domain; Owner: postgres
--

COMMENT ON TABLE job_domain.job_descriptions IS 'detailed job descriptions and salary information';


--
-- Name: job_skills; Type: TABLE; Schema: job_domain; Owner: postgres
--

CREATE TABLE job_domain.job_skills (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    job_id uuid,
    skill_name text NOT NULL
);


ALTER TABLE job_domain.job_skills OWNER TO postgres;

--
-- Name: TABLE job_skills; Type: COMMENT; Schema: job_domain; Owner: postgres
--

COMMENT ON TABLE job_domain.job_skills IS 'skills required for job positions';


--
-- Name: jobs; Type: TABLE; Schema: job_domain; Owner: postgres
--

CREATE TABLE job_domain.jobs (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    title text NOT NULL,
    company text NOT NULL,
    location text,
    description text,
    job_type job_domain.job_type NOT NULL,
    is_remote boolean DEFAULT false,
    experience_level job_domain.experience_level,
    posted_by uuid,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE job_domain.jobs OWNER TO postgres;

--
-- Name: TABLE jobs; Type: COMMENT; Schema: job_domain; Owner: postgres
--

COMMENT ON TABLE job_domain.jobs IS 'job listings with basic information';


--
-- Name: permissions; Type: TABLE; Schema: rbac; Owner: postgres
--

CREATE TABLE rbac.permissions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    type text NOT NULL,
    object text NOT NULL,
    action text GENERATED ALWAYS AS (((type || ' on '::text) || object)) STORED,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone,
    deleted_at timestamp with time zone
);


ALTER TABLE rbac.permissions OWNER TO postgres;

--
-- Name: role_permissions; Type: TABLE; Schema: rbac; Owner: postgres
--

CREATE TABLE rbac.role_permissions (
    role_id uuid NOT NULL,
    permission_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone,
    deleted_at timestamp with time zone
);


ALTER TABLE rbac.role_permissions OWNER TO postgres;

--
-- Name: roles; Type: TABLE; Schema: rbac; Owner: postgres
--

CREATE TABLE rbac.roles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    description text,
    active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone,
    deleted_at timestamp with time zone
);


ALTER TABLE rbac.roles OWNER TO postgres;

--
-- Name: user_roles; Type: TABLE; Schema: rbac; Owner: postgres
--

CREATE TABLE rbac.user_roles (
    user_id uuid NOT NULL,
    role_id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone,
    deleted_at timestamp with time zone
);


ALTER TABLE rbac.user_roles OWNER TO postgres;

--
-- Name: user_permissions; Type: VIEW; Schema: rbac; Owner: postgres
--

CREATE VIEW rbac.user_permissions AS
 SELECT ur.user_id,
    r.name AS role,
    p.action AS permission
   FROM (((rbac.permissions p
     LEFT JOIN rbac.role_permissions rp ON ((rp.permission_id = p.id)))
     LEFT JOIN rbac.roles r ON ((r.id = rp.role_id)))
     LEFT JOIN rbac.user_roles ur ON ((ur.role_id = r.id)))
  WHERE ((r.active = true) AND (r.deleted_at IS NULL) AND (ur.deleted_at IS NULL) AND (rp.deleted_at IS NULL) AND (p.deleted_at IS NULL));


ALTER TABLE rbac.user_permissions OWNER TO postgres;

--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
)
PARTITION BY RANGE (inserted_at);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: resume_education; Type: TABLE; Schema: resume_domain; Owner: postgres
--

CREATE TABLE resume_domain.resume_education (
    resume_id uuid NOT NULL,
    institute text NOT NULL,
    degree text,
    field_of_study text,
    start_date date,
    end_date date,
    is_current boolean DEFAULT false,
    description text,
    id text NOT NULL,
    CONSTRAINT valid_date_range CHECK (((end_date IS NULL) OR (start_date <= end_date)))
);


ALTER TABLE resume_domain.resume_education OWNER TO postgres;

--
-- Name: TABLE resume_education; Type: COMMENT; Schema: resume_domain; Owner: postgres
--

COMMENT ON TABLE resume_domain.resume_education IS 'educational history from resumes';


--
-- Name: resume_experience; Type: TABLE; Schema: resume_domain; Owner: postgres
--

CREATE TABLE resume_domain.resume_experience (
    resume_id uuid NOT NULL,
    company text NOT NULL,
    title text NOT NULL,
    start_date date,
    end_date date,
    is_current boolean DEFAULT false,
    description text,
    id text DEFAULT ''::text NOT NULL,
    CONSTRAINT valid_date_range CHECK (((end_date IS NULL) OR (start_date <= end_date)))
);


ALTER TABLE resume_domain.resume_experience OWNER TO postgres;

--
-- Name: TABLE resume_experience; Type: COMMENT; Schema: resume_domain; Owner: postgres
--

COMMENT ON TABLE resume_domain.resume_experience IS 'work experience history from resumes';


--
-- Name: resume_skills; Type: TABLE; Schema: resume_domain; Owner: postgres
--

CREATE TABLE resume_domain.resume_skills (
    resume_id uuid NOT NULL,
    skill_name text NOT NULL,
    proficiency integer,
    years_experience integer,
    is_current boolean DEFAULT true,
    id text NOT NULL,
    CONSTRAINT resume_skills_proficiency_check CHECK (((proficiency >= 1) AND (proficiency <= 5)))
);


ALTER TABLE resume_domain.resume_skills OWNER TO postgres;

--
-- Name: TABLE resume_skills; Type: COMMENT; Schema: resume_domain; Owner: postgres
--

COMMENT ON TABLE resume_domain.resume_skills IS 'skills listed in user resumes';


--
-- Name: resumes; Type: TABLE; Schema: resume_domain; Owner: postgres
--

CREATE TABLE resume_domain.resumes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    filename text NOT NULL,
    file_path text,
    file_size integer,
    file_type text,
    is_default boolean DEFAULT false,
    parsed boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE resume_domain.resumes OWNER TO postgres;

--
-- Name: TABLE resumes; Type: COMMENT; Schema: resume_domain; Owner: postgres
--

COMMENT ON TABLE resume_domain.resumes IS 'user resume documents';


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: admin_permissions; Type: TABLE; Schema: user_domain; Owner: postgres
--

CREATE TABLE user_domain.admin_permissions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    can_manage_users boolean DEFAULT false,
    can_manage_jobs boolean DEFAULT false,
    can_view_analytics boolean DEFAULT false,
    can_manage_settings boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE user_domain.admin_permissions OWNER TO postgres;

--
-- Name: TABLE admin_permissions; Type: COMMENT; Schema: user_domain; Owner: postgres
--

COMMENT ON TABLE user_domain.admin_permissions IS 'permission settings for admin users';


--
-- Name: user_emails; Type: TABLE; Schema: user_domain; Owner: postgres
--

CREATE TABLE user_domain.user_emails (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    email text NOT NULL,
    is_primary boolean DEFAULT false,
    verified boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE user_domain.user_emails OWNER TO postgres;

--
-- Name: TABLE user_emails; Type: COMMENT; Schema: user_domain; Owner: postgres
--

COMMENT ON TABLE user_domain.user_emails IS 'additional user email addresses';


--
-- Name: user_phone_numbers; Type: TABLE; Schema: user_domain; Owner: postgres
--

CREATE TABLE user_domain.user_phone_numbers (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    phone_number text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE user_domain.user_phone_numbers OWNER TO postgres;

--
-- Name: TABLE user_phone_numbers; Type: COMMENT; Schema: user_domain; Owner: postgres
--

COMMENT ON TABLE user_domain.user_phone_numbers IS 'user contact phone numbers';


--
-- Name: user_profiles; Type: TABLE; Schema: user_domain; Owner: postgres
--

CREATE TABLE user_domain.user_profiles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    profile_picture text,
    first_name text,
    last_name text,
    professional_title text,
    current_position text,
    years_of_experience integer,
    desired_salary numeric(12,2),
    remote_preference text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE user_domain.user_profiles OWNER TO postgres;

--
-- Name: TABLE user_profiles; Type: COMMENT; Schema: user_domain; Owner: postgres
--

COMMENT ON TABLE user_domain.user_profiles IS 'user professional profiles and personal information';


--
-- Name: user_security_info; Type: TABLE; Schema: user_domain; Owner: postgres
--

CREATE TABLE user_domain.user_security_info (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    mfa_secret text,
    mfa_recovery_codes text,
    mfa_enabled boolean DEFAULT false,
    mfa_method text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE user_domain.user_security_info OWNER TO postgres;

--
-- Name: TABLE user_security_info; Type: COMMENT; Schema: user_domain; Owner: postgres
--

COMMENT ON TABLE user_domain.user_security_info IS 'additional security settings beyond supabase auth';


--
-- Name: user_settings; Type: TABLE; Schema: user_domain; Owner: postgres
--

CREATE TABLE user_domain.user_settings (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    email_notifications boolean DEFAULT true,
    job_alert_notifications boolean DEFAULT true,
    resume_viewed boolean DEFAULT true,
    language text DEFAULT 'en'::text,
    profile_visibility text DEFAULT 'public'::text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE user_domain.user_settings OWNER TO postgres;

--
-- Name: TABLE user_settings; Type: COMMENT; Schema: user_domain; Owner: postgres
--

COMMENT ON TABLE user_domain.user_settings IS 'user preferences and configuration settings';


--
-- Name: user_skills; Type: TABLE; Schema: user_domain; Owner: postgres
--

CREATE TABLE user_domain.user_skills (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    skill_name text NOT NULL,
    skill_level integer,
    years_experience numeric(4,1),
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT user_skills_skill_level_check CHECK (((skill_level >= 1) AND (skill_level <= 5)))
);


ALTER TABLE user_domain.user_skills OWNER TO postgres;

--
-- Name: TABLE user_skills; Type: COMMENT; Schema: user_domain; Owner: postgres
--

COMMENT ON TABLE user_domain.user_skills IS 'user skills independent of resume entries';


--
-- Name: user_social_logins; Type: TABLE; Schema: user_domain; Owner: postgres
--

CREATE TABLE user_domain.user_social_logins (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    provider_id text NOT NULL,
    provider text NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE user_domain.user_social_logins OWNER TO postgres;

--
-- Name: TABLE user_social_logins; Type: COMMENT; Schema: user_domain; Owner: postgres
--

COMMENT ON TABLE user_domain.user_social_logins IS 'additional social login info beyond supabase auth providers';


--
-- Name: users; Type: TABLE; Schema: user_domain; Owner: postgres
--

CREATE TABLE user_domain.users (
    id uuid NOT NULL,
    username text NOT NULL,
    role user_domain.user_role DEFAULT 'employee'::user_domain.user_role NOT NULL,
    is_enabled boolean DEFAULT true,
    is_active boolean DEFAULT true,
    last_login timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE user_domain.users OWNER TO postgres;

--
-- Name: TABLE users; Type: COMMENT; Schema: user_domain; Owner: postgres
--

COMMENT ON TABLE user_domain.users IS 'core user accounts linked with supabase auth.users';


--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	e42dafd0-6fd7-4287-a792-a025edb7a556	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"zok210305@gmail.com","user_id":"30c4c4e0-7273-4fa0-914c-f744c346df71","user_phone":""}}	2025-03-15 18:22:06.128923+00	
00000000-0000-0000-0000-000000000000	3e8e270e-4371-4c14-bd52-57c69e2c2500	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"employee1@example.com","user_id":"63f7d733-ae32-4219-a6b1-96d2615210cd","user_phone":""}}	2025-04-17 09:08:24.34676+00	
00000000-0000-0000-0000-000000000000	e20f7b1e-53d5-4d7c-b8db-974e1d81a226	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"employer1@example.com","user_id":"61444537-42d2-44b4-8a37-0fa2acc3402f","user_phone":""}}	2025-04-17 09:08:41.304074+00	
00000000-0000-0000-0000-000000000000	ae55af0b-810d-4daa-ac94-d0be7c707cdd	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"admin1@example.com","user_id":"43db42df-c735-405f-ab29-2f3b8ecfa7cc","user_phone":""}}	2025-04-17 09:08:52.546713+00	
00000000-0000-0000-0000-000000000000	e0756bb1-1ade-4d2f-bbd3-da19bd0e8a35	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"employer1@example.com","user_id":"61444537-42d2-44b4-8a37-0fa2acc3402f","user_phone":""}}	2025-04-17 09:42:31.016418+00	
00000000-0000-0000-0000-000000000000	4ff0a3d8-9eff-4c1c-b560-51917624231d	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"admin1@example.com","user_id":"43db42df-c735-405f-ab29-2f3b8ecfa7cc","user_phone":""}}	2025-04-17 09:42:35.538296+00	
00000000-0000-0000-0000-000000000000	10534045-3d3e-4bd4-bdb0-64f924614553	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"employee1@example.com","user_id":"63f7d733-ae32-4219-a6b1-96d2615210cd","user_phone":""}}	2025-04-17 09:42:38.784201+00	
00000000-0000-0000-0000-000000000000	34b69d48-a0c4-4596-99fe-3480ccdf1827	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"employee1@example.com","user_id":"4517b4f5-464f-48f0-b2b2-b76ad02036b6","user_phone":""}}	2025-04-17 09:42:54.888795+00	
00000000-0000-0000-0000-000000000000	e215b15e-c4ae-4b8b-8a93-c8d731fcf94d	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"employer1@example.com","user_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","user_phone":""}}	2025-04-17 09:43:07.64991+00	
00000000-0000-0000-0000-000000000000	315d7afb-02f8-405f-8c4f-455a3feb05eb	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"admin@example.com","user_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","user_phone":""}}	2025-04-17 09:43:18.867968+00	
00000000-0000-0000-0000-000000000000	b1f1aa09-f27a-4588-b370-715b4d1f2149	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 09:43:31.950656+00	
00000000-0000-0000-0000-000000000000	3ad1fa0b-d7a9-48f6-a9ee-3c748b40166c	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 10:41:30.003331+00	
00000000-0000-0000-0000-000000000000	2fa774e2-2fe3-4b9b-ba63-bab8a6a58a73	{"action":"logout","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account"}	2025-04-17 10:42:56.693212+00	
00000000-0000-0000-0000-000000000000	00406192-75db-4c47-9502-f314e4e9bef2	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 10:44:10.473609+00	
00000000-0000-0000-0000-000000000000	b2dea008-9fce-41a1-a01a-24bca54cb959	{"action":"logout","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account"}	2025-04-17 10:45:53.489713+00	
00000000-0000-0000-0000-000000000000	62fabc15-3c17-4d88-a1a8-af463e350e73	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 10:46:05.851003+00	
00000000-0000-0000-0000-000000000000	71564daf-d64f-4a5e-9573-51faf2aee3d5	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 10:48:18.290146+00	
00000000-0000-0000-0000-000000000000	3ecc668f-1fbd-4557-ad65-ce7e4a42ea98	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 10:50:16.955431+00	
00000000-0000-0000-0000-000000000000	c12d3cc1-c82a-4067-b446-1c54c1f749ac	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 10:50:32.356952+00	
00000000-0000-0000-0000-000000000000	9439688a-253c-4491-8875-02c382adb315	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 10:52:56.331342+00	
00000000-0000-0000-0000-000000000000	116e19b1-fb72-4e4b-af1b-f8c5b800c94a	{"action":"login","actor_id":"4517b4f5-464f-48f0-b2b2-b76ad02036b6","actor_username":"employee1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 10:54:26.36734+00	
00000000-0000-0000-0000-000000000000	b884ffee-36dd-417f-b449-de8845c35cef	{"action":"login","actor_id":"4517b4f5-464f-48f0-b2b2-b76ad02036b6","actor_username":"employee1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 11:08:12.725608+00	
00000000-0000-0000-0000-000000000000	b0503925-32d2-4744-b159-d5bd7b729714	{"action":"login","actor_id":"4517b4f5-464f-48f0-b2b2-b76ad02036b6","actor_username":"employee1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 11:09:44.195709+00	
00000000-0000-0000-0000-000000000000	d01025c6-0304-44a0-aa71-75ae50de9e7a	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 15:47:51.23955+00	
00000000-0000-0000-0000-000000000000	a2079c81-2d4b-48be-9f2a-b5f561e5a2cd	{"action":"login","actor_id":"4517b4f5-464f-48f0-b2b2-b76ad02036b6","actor_username":"employee1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 15:49:46.51488+00	
00000000-0000-0000-0000-000000000000	38f4863d-80e5-4be0-ae80-4daa22955ee4	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 15:52:45.577539+00	
00000000-0000-0000-0000-000000000000	a477a98c-8cdf-4028-9c91-51c541e76602	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 15:57:40.37342+00	
00000000-0000-0000-0000-000000000000	7c7f2ad6-e792-40f5-9703-b714197318d7	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-17 16:05:47.807748+00	
00000000-0000-0000-0000-000000000000	f4e5c616-e606-4ce2-bbfc-cbc36daf45ca	{"action":"user_confirmation_requested","actor_id":"ad1ea3cd-4fcc-4a82-9149-229aea625199","actor_username":"gerray@duck.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-04-18 15:37:31.53485+00	
00000000-0000-0000-0000-000000000000	bc6ccbc3-5ee6-4a90-a925-6ddc19e8c63f	{"action":"user_confirmation_requested","actor_id":"a8051eb1-0c97-47da-b8b6-80875654adf0","actor_username":"boizbjp@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-04-18 15:37:45.036343+00	
00000000-0000-0000-0000-000000000000	05201ead-64d7-4666-b8b3-66d790d9718c	{"action":"user_signedup","actor_id":"a8051eb1-0c97-47da-b8b6-80875654adf0","actor_username":"boizbjp@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-04-19 03:30:02.685552+00	
00000000-0000-0000-0000-000000000000	dae97410-431b-42b3-82ae-4207f41cf036	{"action":"login","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-19 05:00:02.603572+00	
00000000-0000-0000-0000-000000000000	f7772d2d-c1df-4afd-80c5-6045b11bd03c	{"action":"token_refreshed","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 05:00:07.216427+00	
00000000-0000-0000-0000-000000000000	81f1e6b3-6820-4e84-8df0-b70c78e8bf95	{"action":"token_revoked","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"token"}	2025-04-19 05:00:07.217083+00	
00000000-0000-0000-0000-000000000000	0604dbd2-40b9-4204-baaf-1053dd0143ac	{"action":"token_refreshed","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 05:29:46.332315+00	
00000000-0000-0000-0000-000000000000	621ced95-e13f-4cfb-b4cf-31b4eccde13d	{"action":"token_revoked","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 05:29:46.354625+00	
00000000-0000-0000-0000-000000000000	c48ba437-2d8c-4863-9f66-4bc44b85281a	{"action":"token_refreshed","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 07:01:20.327625+00	
00000000-0000-0000-0000-000000000000	55e0f4c3-2223-4858-bf31-b1c3e1e26560	{"action":"token_revoked","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"token"}	2025-04-20 07:01:20.333625+00	
00000000-0000-0000-0000-000000000000	0a2009c3-9f3d-4c99-baa6-d4afe085ea3b	{"action":"login","actor_id":"4517b4f5-464f-48f0-b2b2-b76ad02036b6","actor_username":"employee1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-20 07:15:04.256217+00	
00000000-0000-0000-0000-000000000000	9f45cb50-aaa1-4c6a-a10d-66d9abee745b	{"action":"token_refreshed","actor_id":"4517b4f5-464f-48f0-b2b2-b76ad02036b6","actor_username":"employee1@example.com","actor_via_sso":false,"log_type":"token"}	2025-04-21 06:37:13.452653+00	
00000000-0000-0000-0000-000000000000	dd51f901-4d21-4998-a061-93dd569bb404	{"action":"token_revoked","actor_id":"4517b4f5-464f-48f0-b2b2-b76ad02036b6","actor_username":"employee1@example.com","actor_via_sso":false,"log_type":"token"}	2025-04-21 06:37:13.472788+00	
00000000-0000-0000-0000-000000000000	2a67181f-ec8a-4cc9-b41a-3361826203be	{"action":"user_confirmation_requested","actor_id":"7700f576-95af-401d-be7d-f9f96de03d4c","actor_username":"maiphuocminhtai21032005@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-04-21 06:38:59.016488+00	
00000000-0000-0000-0000-000000000000	58eb6669-9d83-4640-8f71-b6f48611efd4	{"action":"user_confirmation_requested","actor_id":"99f07dd1-4f07-4f1a-97b2-d12c5c50e1ff","actor_username":"taigazoroa111@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-04-21 15:58:36.913624+00	
00000000-0000-0000-0000-000000000000	d2b07724-b1a8-459f-8918-4c7c3b10bb1a	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-21 16:29:01.640762+00	
00000000-0000-0000-0000-000000000000	28c640cb-a1ef-453e-8dee-5a48759e1378	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:28:43.338259+00	
00000000-0000-0000-0000-000000000000	4c34ff22-4eee-4628-806d-b2397f7759ba	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:29:11.565843+00	
00000000-0000-0000-0000-000000000000	e50bc726-26d6-476a-8cde-4a8893fc56f1	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:29:13.035657+00	
00000000-0000-0000-0000-000000000000	db950e81-1b00-4b74-b8aa-52a71d55609d	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:29:23.657488+00	
00000000-0000-0000-0000-000000000000	72024489-4edf-4f49-9f94-a62fb76fd29c	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:29:30.106431+00	
00000000-0000-0000-0000-000000000000	399c00c7-569c-4f49-925e-b9f04944f17b	{"action":"logout","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account"}	2025-04-22 07:30:04.446193+00	
00000000-0000-0000-0000-000000000000	ce384a9a-44ab-42aa-9a50-8d903bf9fa0f	{"action":"login","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:43:38.840942+00	
00000000-0000-0000-0000-000000000000	16e485ff-339c-4bdb-a5d6-21cd279f3c12	{"action":"login","actor_id":"71ee08d2-ee66-443b-a86a-b3803d949d53","actor_username":"admin@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:52:23.39091+00	
00000000-0000-0000-0000-000000000000	1ad5bff8-28ff-4c95-9c77-63d99e56b76f	{"action":"login","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:52:30.351306+00	
00000000-0000-0000-0000-000000000000	51947f56-ef41-4b13-bc65-45df03e7e98e	{"action":"logout","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"account"}	2025-04-22 07:52:44.487554+00	
00000000-0000-0000-0000-000000000000	a1c09268-3497-4359-8b0b-c40d3e5139ab	{"action":"login","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:52:47.698856+00	
00000000-0000-0000-0000-000000000000	4f15a0d6-7a42-41a3-8043-889382b35158	{"action":"login","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:52:53.296262+00	
00000000-0000-0000-0000-000000000000	b0a37ef3-803c-44d0-8936-838b7adbacbf	{"action":"login","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:57:14.003324+00	
00000000-0000-0000-0000-000000000000	94e9d405-17e3-4c8b-93bf-0095af2ce57e	{"action":"login","actor_id":"22a5ca99-76ed-4c7a-aad9-b39e1df25b16","actor_username":"employer1@example.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 07:57:21.225755+00	
00000000-0000-0000-0000-000000000000	dcf14d2b-7aa7-4c24-8e43-fca830c429bf	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"admin@jobfit.com","user_id":"a00da32b-0a91-494d-96c8-60510882f102","user_phone":""}}	2025-04-22 13:27:30.997412+00	
00000000-0000-0000-0000-000000000000	b761662e-ce3b-4cf1-ad52-54ec4a81535d	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"employer@jobfit.com","user_id":"8f0fd729-6473-4e77-ae36-aa74515b6d1f","user_phone":""}}	2025-04-22 13:27:43.407707+00	
00000000-0000-0000-0000-000000000000	2c1e6b9d-1af2-40e0-90e3-fcca74d0a5ad	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"employee@jobfit.com","user_id":"b7de65ea-4c13-46e0-86e1-f2809c659cfc","user_phone":""}}	2025-04-22 13:27:54.55334+00	
00000000-0000-0000-0000-000000000000	e07157ea-ea7c-4d76-aba3-20eaf7169405	{"action":"login","actor_id":"8f0fd729-6473-4e77-ae36-aa74515b6d1f","actor_username":"employer@jobfit.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 17:39:31.969051+00	
00000000-0000-0000-0000-000000000000	9a856d27-8bfb-43a7-b197-568ce24e35db	{"action":"logout","actor_id":"8f0fd729-6473-4e77-ae36-aa74515b6d1f","actor_username":"employer@jobfit.com","actor_via_sso":false,"log_type":"account"}	2025-04-22 17:39:50.820855+00	
00000000-0000-0000-0000-000000000000	cc73dd97-b9f7-4faa-97fa-d7330e1272a3	{"action":"login","actor_id":"a00da32b-0a91-494d-96c8-60510882f102","actor_username":"admin@jobfit.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 17:39:53.79918+00	
00000000-0000-0000-0000-000000000000	8a2aaa54-8343-4960-b1d4-81eb9c06972d	{"action":"logout","actor_id":"a00da32b-0a91-494d-96c8-60510882f102","actor_username":"admin@jobfit.com","actor_via_sso":false,"log_type":"account"}	2025-04-22 17:40:09.74003+00	
00000000-0000-0000-0000-000000000000	639b9c4d-cbad-4768-b99e-88e14d107c0d	{"action":"login","actor_id":"a00da32b-0a91-494d-96c8-60510882f102","actor_username":"admin@jobfit.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 17:54:53.276479+00	
00000000-0000-0000-0000-000000000000	262b7c5e-ad01-4d7f-9cce-52f36115c302	{"action":"login","actor_id":"8f0fd729-6473-4e77-ae36-aa74515b6d1f","actor_username":"employer@jobfit.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 18:06:11.92545+00	
00000000-0000-0000-0000-000000000000	05c8f680-defe-4f92-8b6a-8a67e93f96c5	{"action":"login","actor_id":"8f0fd729-6473-4e77-ae36-aa74515b6d1f","actor_username":"employer@jobfit.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 18:06:21.308668+00	
00000000-0000-0000-0000-000000000000	f4f0a3a3-c436-420b-9d02-0c7c15bdff0e	{"action":"login","actor_id":"8f0fd729-6473-4e77-ae36-aa74515b6d1f","actor_username":"employer@jobfit.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 18:18:56.926236+00	
00000000-0000-0000-0000-000000000000	5314edf6-255e-4b9b-9ec9-c68576065f65	{"action":"login","actor_id":"8f0fd729-6473-4e77-ae36-aa74515b6d1f","actor_username":"employer@jobfit.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-22 18:27:02.626329+00	
00000000-0000-0000-0000-000000000000	ac17096b-e4bd-4ed0-95ad-33f25b7d912a	{"action":"login","actor_id":"a00da32b-0a91-494d-96c8-60510882f102","actor_username":"admin@jobfit.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-23 05:16:51.98908+00	
00000000-0000-0000-0000-000000000000	8f2704c8-bf4a-488f-9f84-01cf87fc4e46	{"action":"token_refreshed","actor_id":"4517b4f5-464f-48f0-b2b2-b76ad02036b6","actor_username":"employee1@example.com","actor_via_sso":false,"log_type":"token"}	2025-04-24 18:38:23.866155+00	
00000000-0000-0000-0000-000000000000	d05cebce-e0c4-4070-a9ff-77d845ee69c1	{"action":"token_revoked","actor_id":"4517b4f5-464f-48f0-b2b2-b76ad02036b6","actor_username":"employee1@example.com","actor_via_sso":false,"log_type":"token"}	2025-04-24 18:38:23.877256+00	
00000000-0000-0000-0000-000000000000	44f67144-8cc2-4b42-8ad6-64494320d968	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"1@gmail.com","user_id":"7fa01997-d8a9-4305-9964-f5cc4b8fc28d","user_phone":""}}	2025-04-25 17:56:14.293551+00	
00000000-0000-0000-0000-000000000000	5a1b81b7-ec1b-4550-9b0b-2d5ebe763575	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"2@gmail.com","user_id":"3030c7ff-72c2-4049-92a6-2335d74edd46","user_phone":""}}	2025-04-25 17:56:57.838903+00	
00000000-0000-0000-0000-000000000000	219baf91-82c0-45ec-8d91-8503ed873546	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"3@gmail.com","user_id":"ff4f1ddf-1f06-456a-a748-ea951e2ec5be","user_phone":""}}	2025-04-25 17:57:03.265709+00	
00000000-0000-0000-0000-000000000000	ca1763e3-7f02-4622-8d41-d81ff76c249c	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"4@gmail.com","user_id":"bf76ffd2-b2bc-42a5-8fed-79eeb919a754","user_phone":""}}	2025-04-25 17:57:10.482597+00	
00000000-0000-0000-0000-000000000000	2fc8dc27-ab86-442c-a190-9d6b81ba9cd1	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"5@gmail.com","user_id":"ea0c502c-134d-4ce8-b84b-970eca5cc7a6","user_phone":""}}	2025-04-25 17:57:18.85726+00	
00000000-0000-0000-0000-000000000000	3396d15d-afcc-43bd-a6d3-92c231687f5b	{"action":"token_refreshed","actor_id":"8f0fd729-6473-4e77-ae36-aa74515b6d1f","actor_username":"employer@jobfit.com","actor_via_sso":false,"log_type":"token"}	2025-04-25 20:30:05.87591+00	
00000000-0000-0000-0000-000000000000	1140cf45-6714-4432-9eaf-201630f6c27e	{"action":"token_revoked","actor_id":"8f0fd729-6473-4e77-ae36-aa74515b6d1f","actor_username":"employer@jobfit.com","actor_via_sso":false,"log_type":"token"}	2025-04-25 20:30:05.889135+00	
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
30c4c4e0-7273-4fa0-914c-f744c346df71	30c4c4e0-7273-4fa0-914c-f744c346df71	{"sub": "30c4c4e0-7273-4fa0-914c-f744c346df71", "email": "zok210305@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-03-15 18:22:06.125162+00	2025-03-15 18:22:06.125845+00	2025-03-15 18:22:06.125845+00	e30ba11f-0d34-4082-9920-21f3b0f93ae6
4517b4f5-464f-48f0-b2b2-b76ad02036b6	4517b4f5-464f-48f0-b2b2-b76ad02036b6	{"sub": "4517b4f5-464f-48f0-b2b2-b76ad02036b6", "email": "employee1@example.com", "email_verified": false, "phone_verified": false}	email	2025-04-17 09:42:54.887968+00	2025-04-17 09:42:54.888026+00	2025-04-17 09:42:54.888026+00	18901067-314b-4c1a-95ff-def2e2617763
22a5ca99-76ed-4c7a-aad9-b39e1df25b16	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	{"sub": "22a5ca99-76ed-4c7a-aad9-b39e1df25b16", "email": "employer1@example.com", "email_verified": false, "phone_verified": false}	email	2025-04-17 09:43:07.649049+00	2025-04-17 09:43:07.6491+00	2025-04-17 09:43:07.6491+00	97213720-0477-4507-a58a-1d30de280e17
71ee08d2-ee66-443b-a86a-b3803d949d53	71ee08d2-ee66-443b-a86a-b3803d949d53	{"sub": "71ee08d2-ee66-443b-a86a-b3803d949d53", "email": "admin@example.com", "email_verified": false, "phone_verified": false}	email	2025-04-17 09:43:18.867181+00	2025-04-17 09:43:18.867235+00	2025-04-17 09:43:18.867235+00	b5287b60-9ae0-4201-8fb1-000b58131845
ad1ea3cd-4fcc-4a82-9149-229aea625199	ad1ea3cd-4fcc-4a82-9149-229aea625199	{"sub": "ad1ea3cd-4fcc-4a82-9149-229aea625199", "email": "gerray@duck.com", "email_verified": false, "phone_verified": false}	email	2025-04-18 15:37:31.532309+00	2025-04-18 15:37:31.532355+00	2025-04-18 15:37:31.532355+00	a0c041cb-9e5e-442f-b4ec-514c8f90f470
a8051eb1-0c97-47da-b8b6-80875654adf0	a8051eb1-0c97-47da-b8b6-80875654adf0	{"sub": "a8051eb1-0c97-47da-b8b6-80875654adf0", "email": "boizbjp@gmail.com", "email_verified": true, "phone_verified": false}	email	2025-04-18 15:37:45.034387+00	2025-04-18 15:37:45.034432+00	2025-04-18 15:37:45.034432+00	fd559301-851c-457a-9c54-2a99fcd5d755
7700f576-95af-401d-be7d-f9f96de03d4c	7700f576-95af-401d-be7d-f9f96de03d4c	{"sub": "7700f576-95af-401d-be7d-f9f96de03d4c", "email": "maiphuocminhtai21032005@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-04-21 06:38:59.012118+00	2025-04-21 06:38:59.012168+00	2025-04-21 06:38:59.012168+00	44075432-3bbc-485c-b257-304ce8aed48a
99f07dd1-4f07-4f1a-97b2-d12c5c50e1ff	99f07dd1-4f07-4f1a-97b2-d12c5c50e1ff	{"sub": "99f07dd1-4f07-4f1a-97b2-d12c5c50e1ff", "email": "taigazoroa111@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-04-21 15:58:36.90571+00	2025-04-21 15:58:36.905758+00	2025-04-21 15:58:36.905758+00	0f1f3566-def0-4608-9cff-580a179fbe5d
a00da32b-0a91-494d-96c8-60510882f102	a00da32b-0a91-494d-96c8-60510882f102	{"sub": "a00da32b-0a91-494d-96c8-60510882f102", "email": "admin@jobfit.com", "email_verified": false, "phone_verified": false}	email	2025-04-22 13:27:30.992028+00	2025-04-22 13:27:30.992087+00	2025-04-22 13:27:30.992087+00	32be09cc-b3b2-4074-939d-c508a65caee8
8f0fd729-6473-4e77-ae36-aa74515b6d1f	8f0fd729-6473-4e77-ae36-aa74515b6d1f	{"sub": "8f0fd729-6473-4e77-ae36-aa74515b6d1f", "email": "employer@jobfit.com", "email_verified": false, "phone_verified": false}	email	2025-04-22 13:27:43.406952+00	2025-04-22 13:27:43.407001+00	2025-04-22 13:27:43.407001+00	112b464a-197f-43ef-bdd2-60f5c950c584
b7de65ea-4c13-46e0-86e1-f2809c659cfc	b7de65ea-4c13-46e0-86e1-f2809c659cfc	{"sub": "b7de65ea-4c13-46e0-86e1-f2809c659cfc", "email": "employee@jobfit.com", "email_verified": false, "phone_verified": false}	email	2025-04-22 13:27:54.552036+00	2025-04-22 13:27:54.552083+00	2025-04-22 13:27:54.552083+00	1e2a397f-79a0-41c5-bc03-f82f452e34b3
7fa01997-d8a9-4305-9964-f5cc4b8fc28d	7fa01997-d8a9-4305-9964-f5cc4b8fc28d	{"sub": "7fa01997-d8a9-4305-9964-f5cc4b8fc28d", "email": "1@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-04-25 17:56:14.286074+00	2025-04-25 17:56:14.286143+00	2025-04-25 17:56:14.286143+00	a1639576-d0db-40e3-870b-6376a425a348
3030c7ff-72c2-4049-92a6-2335d74edd46	3030c7ff-72c2-4049-92a6-2335d74edd46	{"sub": "3030c7ff-72c2-4049-92a6-2335d74edd46", "email": "2@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-04-25 17:56:57.834086+00	2025-04-25 17:56:57.834714+00	2025-04-25 17:56:57.834714+00	1b0adfd5-ab18-4999-9bc5-c60ae0642838
ff4f1ddf-1f06-456a-a748-ea951e2ec5be	ff4f1ddf-1f06-456a-a748-ea951e2ec5be	{"sub": "ff4f1ddf-1f06-456a-a748-ea951e2ec5be", "email": "3@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-04-25 17:57:03.262906+00	2025-04-25 17:57:03.262961+00	2025-04-25 17:57:03.262961+00	a4c5a776-5b48-45db-a0fd-94931a88920d
bf76ffd2-b2bc-42a5-8fed-79eeb919a754	bf76ffd2-b2bc-42a5-8fed-79eeb919a754	{"sub": "bf76ffd2-b2bc-42a5-8fed-79eeb919a754", "email": "4@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-04-25 17:57:10.481779+00	2025-04-25 17:57:10.481849+00	2025-04-25 17:57:10.481849+00	469126a9-1143-42ec-ab1f-628d15c193d7
ea0c502c-134d-4ce8-b84b-970eca5cc7a6	ea0c502c-134d-4ce8-b84b-970eca5cc7a6	{"sub": "ea0c502c-134d-4ce8-b84b-970eca5cc7a6", "email": "5@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-04-25 17:57:18.856351+00	2025-04-25 17:57:18.85641+00	2025-04-25 17:57:18.85641+00	f2719dcf-918d-4a8b-80b0-b0d1709f13f5
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
311dbe4a-c5ad-4eaa-a090-42026a04b06d	2025-04-17 10:54:26.374002+00	2025-04-17 10:54:26.374002+00	password	d0a02be6-189c-42a1-b9e4-8916f5436081
d0ca8f29-19d1-4609-9351-b64217770476	2025-04-17 11:08:12.732438+00	2025-04-17 11:08:12.732438+00	password	98adee6c-c51b-4fb9-98ae-de6a0a442a1f
5cb5a59d-16fa-4d40-b090-44fe25b13de3	2025-04-17 11:09:44.203639+00	2025-04-17 11:09:44.203639+00	password	55743402-e4ab-401e-973f-eaba3c8d2257
7aba0a78-938c-4dc0-85ce-ed86f198c63b	2025-04-17 15:49:46.521004+00	2025-04-17 15:49:46.521004+00	password	ff31e13f-3a97-47c2-b5c1-9bd4f45b1e04
fc34d755-7ade-484c-91c8-9415a421c82d	2025-04-19 03:30:02.720685+00	2025-04-19 03:30:02.720685+00	otp	58a9efde-648e-45bb-a707-6c2f1df67638
7fd4521e-6f55-45dc-96df-97c5fea58bd9	2025-04-20 07:15:04.274569+00	2025-04-20 07:15:04.274569+00	password	13791226-ab3a-4585-b805-c11725ad9041
c0bbf0f8-e06a-472d-90b0-4462da401673	2025-04-22 07:52:23.397051+00	2025-04-22 07:52:23.397051+00	password	929e922b-8979-47d5-8397-d856f32a5840
1144a30c-dce2-4476-a7f7-2428e4b3a3bf	2025-04-22 07:52:47.701953+00	2025-04-22 07:52:47.701953+00	password	de68d076-74fb-447d-abb8-0f228965878a
c73c67f3-a604-445d-ba63-1262c82015f4	2025-04-22 07:52:53.298825+00	2025-04-22 07:52:53.298825+00	password	2e5773ac-42bb-4307-8122-a9b0f00567de
a32f0e75-deeb-4552-99e3-8ea9bc0adb0c	2025-04-22 07:57:14.009432+00	2025-04-22 07:57:14.009432+00	password	a71a15f3-111f-492b-a8f1-bfb418d4d5f6
e30f6553-ec7a-41c5-9bbd-a8b859d509ed	2025-04-22 07:57:21.229082+00	2025-04-22 07:57:21.229082+00	password	91100a20-7dc4-4148-bf8b-2f5eb035acb4
1cb1abfc-f3ca-4d3c-91f1-498114debb56	2025-04-22 17:54:53.286542+00	2025-04-22 17:54:53.286542+00	password	212c2635-19cc-4af7-bfff-a449a6ed5c1a
742355b9-96f2-42b8-a3a6-280fa56362fb	2025-04-22 18:06:11.934582+00	2025-04-22 18:06:11.934582+00	password	43989aae-180b-464b-ae73-c223de5b750d
9360748d-343e-4116-b1c4-49239aa2dd2c	2025-04-22 18:06:21.311155+00	2025-04-22 18:06:21.311155+00	password	b8244668-7e00-4012-9be2-35bde9e8348b
41e0cd66-e1df-4b0e-8bff-2ecde6c22bd5	2025-04-22 18:18:56.934399+00	2025-04-22 18:18:56.934399+00	password	7e59caf3-aac2-4c83-98d9-f791d470f7fc
b41d841e-e768-4510-871f-0430e30a1b50	2025-04-22 18:27:02.635225+00	2025-04-22 18:27:02.635225+00	password	77f6deeb-ed64-4f00-a39d-607c84beed1a
270dc795-bc38-47d1-9c8d-bdc9ead3943e	2025-04-23 05:16:52.039249+00	2025-04-23 05:16:52.039249+00	password	6059097f-a58e-436c-a1cb-4d54eda167e1
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
8c073960-2473-45e5-9e37-885340e2c783	ad1ea3cd-4fcc-4a82-9149-229aea625199	confirmation_token	3841ba0abef4ff6771c201bbd93c581a468640061544325c2d05d3f3	gerray@duck.com	2025-04-18 15:37:33.524711	2025-04-18 15:37:33.524711
d50c578c-dd2c-43b8-ae47-ecc1fb9ce137	7700f576-95af-401d-be7d-f9f96de03d4c	confirmation_token	470d11f0095d63eca46ca8d1414ab9595bbec493494e5ec14a980a4f	maiphuocminhtai21032005@gmail.com	2025-04-21 06:39:01.550403	2025-04-21 06:39:01.550403
1eba1b02-a912-4b67-8f5a-5679806fbe86	99f07dd1-4f07-4f1a-97b2-d12c5c50e1ff	confirmation_token	1353cc7a716325153398a4106b4ea0e117e83098863ac857246e8202	taigazoroa111@gmail.com	2025-04-21 15:58:38.736769	2025-04-21 15:58:38.736769
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	9	tOhDQt0tAt5GbmcUL9qI4A	4517b4f5-464f-48f0-b2b2-b76ad02036b6	f	2025-04-17 10:54:26.371523+00	2025-04-17 10:54:26.371523+00	\N	311dbe4a-c5ad-4eaa-a090-42026a04b06d
00000000-0000-0000-0000-000000000000	10	PAcJiH79RgIJNiG27Y7MnQ	4517b4f5-464f-48f0-b2b2-b76ad02036b6	f	2025-04-17 11:08:12.730569+00	2025-04-17 11:08:12.730569+00	\N	d0ca8f29-19d1-4609-9351-b64217770476
00000000-0000-0000-0000-000000000000	11	rufDZ0j4eydz95wUJcLvJw	4517b4f5-464f-48f0-b2b2-b76ad02036b6	f	2025-04-17 11:09:44.201037+00	2025-04-17 11:09:44.201037+00	\N	5cb5a59d-16fa-4d40-b090-44fe25b13de3
00000000-0000-0000-0000-000000000000	13	tH-SDaU2BIokSfXngcQUnQ	4517b4f5-464f-48f0-b2b2-b76ad02036b6	f	2025-04-17 15:49:46.517804+00	2025-04-17 15:49:46.517804+00	\N	7aba0a78-938c-4dc0-85ce-ed86f198c63b
00000000-0000-0000-0000-000000000000	17	FlDxGk4k8BifVxM5H30Jaw	a8051eb1-0c97-47da-b8b6-80875654adf0	f	2025-04-19 03:30:02.710389+00	2025-04-19 03:30:02.710389+00	\N	fc34d755-7ade-484c-91c8-9415a421c82d
00000000-0000-0000-0000-000000000000	22	qYYNxDzf1yPN7q-nY0pbXQ	4517b4f5-464f-48f0-b2b2-b76ad02036b6	t	2025-04-20 07:15:04.266335+00	2025-04-21 06:37:13.473397+00	\N	7fd4521e-6f55-45dc-96df-97c5fea58bd9
00000000-0000-0000-0000-000000000000	31	alypqhNYA_mMpBYaMCNr7g	71ee08d2-ee66-443b-a86a-b3803d949d53	f	2025-04-22 07:52:23.393733+00	2025-04-22 07:52:23.393733+00	\N	c0bbf0f8-e06a-472d-90b0-4462da401673
00000000-0000-0000-0000-000000000000	33	b7DVWo8GqLxMjWRlKtGFPQ	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	f	2025-04-22 07:52:47.700826+00	2025-04-22 07:52:47.700826+00	\N	1144a30c-dce2-4476-a7f7-2428e4b3a3bf
00000000-0000-0000-0000-000000000000	34	YtqWx8N49JR7--qzvzRJcA	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	f	2025-04-22 07:52:53.297662+00	2025-04-22 07:52:53.297662+00	\N	c73c67f3-a604-445d-ba63-1262c82015f4
00000000-0000-0000-0000-000000000000	35	BpxCoPF1Q52bCBqvbsPsbA	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	f	2025-04-22 07:57:14.006774+00	2025-04-22 07:57:14.006774+00	\N	a32f0e75-deeb-4552-99e3-8ea9bc0adb0c
00000000-0000-0000-0000-000000000000	36	bRPtenqRDbY5VDOBv4EWeA	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	f	2025-04-22 07:57:21.227956+00	2025-04-22 07:57:21.227956+00	\N	e30f6553-ec7a-41c5-9bbd-a8b859d509ed
00000000-0000-0000-0000-000000000000	39	HuDTr698HW4PiFvuS5iBWg	a00da32b-0a91-494d-96c8-60510882f102	f	2025-04-22 17:54:53.282172+00	2025-04-22 17:54:53.282172+00	\N	1cb1abfc-f3ca-4d3c-91f1-498114debb56
00000000-0000-0000-0000-000000000000	40	CJ4ahu64FAi1OVBdOKV5Sw	8f0fd729-6473-4e77-ae36-aa74515b6d1f	f	2025-04-22 18:06:11.930335+00	2025-04-22 18:06:11.930335+00	\N	742355b9-96f2-42b8-a3a6-280fa56362fb
00000000-0000-0000-0000-000000000000	41	b1wJmCo4u0hmrzB9_lQVKA	8f0fd729-6473-4e77-ae36-aa74515b6d1f	f	2025-04-22 18:06:21.310035+00	2025-04-22 18:06:21.310035+00	\N	9360748d-343e-4116-b1c4-49239aa2dd2c
00000000-0000-0000-0000-000000000000	42	ENtzh8M_7kUP9Be1sDcdvw	8f0fd729-6473-4e77-ae36-aa74515b6d1f	f	2025-04-22 18:18:56.929526+00	2025-04-22 18:18:56.929526+00	\N	41e0cd66-e1df-4b0e-8bff-2ecde6c22bd5
00000000-0000-0000-0000-000000000000	44	eSe9ByHwIawrSbV5xgHpiA	a00da32b-0a91-494d-96c8-60510882f102	f	2025-04-23 05:16:52.023418+00	2025-04-23 05:16:52.023418+00	\N	270dc795-bc38-47d1-9c8d-bdc9ead3943e
00000000-0000-0000-0000-000000000000	23	kol8jJm3dj4t2F-enaCGqQ	4517b4f5-464f-48f0-b2b2-b76ad02036b6	t	2025-04-21 06:37:13.487004+00	2025-04-24 18:38:23.879887+00	qYYNxDzf1yPN7q-nY0pbXQ	7fd4521e-6f55-45dc-96df-97c5fea58bd9
00000000-0000-0000-0000-000000000000	45	IZxPtIPeY2VQeMukJDpfgg	4517b4f5-464f-48f0-b2b2-b76ad02036b6	f	2025-04-24 18:38:23.888636+00	2025-04-24 18:38:23.888636+00	kol8jJm3dj4t2F-enaCGqQ	7fd4521e-6f55-45dc-96df-97c5fea58bd9
00000000-0000-0000-0000-000000000000	43	VIygivOcXh6BMlV7PIF4BA	8f0fd729-6473-4e77-ae36-aa74515b6d1f	t	2025-04-22 18:27:02.631598+00	2025-04-25 20:30:05.889835+00	\N	b41d841e-e768-4510-871f-0430e30a1b50
00000000-0000-0000-0000-000000000000	46	t6Z-vy_EUECyr_u_cTly3w	8f0fd729-6473-4e77-ae36-aa74515b6d1f	f	2025-04-25 20:30:05.896261+00	2025-04-25 20:30:05.896261+00	VIygivOcXh6BMlV7PIF4BA	b41d841e-e768-4510-871f-0430e30a1b50
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
311dbe4a-c5ad-4eaa-a090-42026a04b06d	4517b4f5-464f-48f0-b2b2-b76ad02036b6	2025-04-17 10:54:26.369014+00	2025-04-17 10:54:26.369014+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	42.118.117.21	\N
d0ca8f29-19d1-4609-9351-b64217770476	4517b4f5-464f-48f0-b2b2-b76ad02036b6	2025-04-17 11:08:12.728332+00	2025-04-17 11:08:12.728332+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	42.118.117.21	\N
5cb5a59d-16fa-4d40-b090-44fe25b13de3	4517b4f5-464f-48f0-b2b2-b76ad02036b6	2025-04-17 11:09:44.198762+00	2025-04-17 11:09:44.198762+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	42.118.117.21	\N
7aba0a78-938c-4dc0-85ce-ed86f198c63b	4517b4f5-464f-48f0-b2b2-b76ad02036b6	2025-04-17 15:49:46.515932+00	2025-04-17 15:49:46.515932+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	42.118.117.21	\N
fc34d755-7ade-484c-91c8-9415a421c82d	a8051eb1-0c97-47da-b8b6-80875654adf0	2025-04-19 03:30:02.706536+00	2025-04-19 03:30:02.706536+00	\N	aal1	\N	\N	Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Mobile Safari/537.36	183.80.64.128	\N
c73c67f3-a604-445d-ba63-1262c82015f4	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	2025-04-22 07:52:53.29701+00	2025-04-22 07:52:53.29701+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	116.105.209.143	\N
a32f0e75-deeb-4552-99e3-8ea9bc0adb0c	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	2025-04-22 07:57:14.004387+00	2025-04-22 07:57:14.004387+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	116.105.209.143	\N
e30f6553-ec7a-41c5-9bbd-a8b859d509ed	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	2025-04-22 07:57:21.226488+00	2025-04-22 07:57:21.226488+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	116.105.209.143	\N
c0bbf0f8-e06a-472d-90b0-4462da401673	71ee08d2-ee66-443b-a86a-b3803d949d53	2025-04-22 07:52:23.391925+00	2025-04-22 07:52:23.391925+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	116.105.209.143	\N
1144a30c-dce2-4476-a7f7-2428e4b3a3bf	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	2025-04-22 07:52:47.699585+00	2025-04-22 07:52:47.699585+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	116.105.209.143	\N
1cb1abfc-f3ca-4d3c-91f1-498114debb56	a00da32b-0a91-494d-96c8-60510882f102	2025-04-22 17:54:53.27928+00	2025-04-22 17:54:53.27928+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	42.118.113.33	\N
742355b9-96f2-42b8-a3a6-280fa56362fb	8f0fd729-6473-4e77-ae36-aa74515b6d1f	2025-04-22 18:06:11.928125+00	2025-04-22 18:06:11.928125+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	42.118.113.33	\N
9360748d-343e-4116-b1c4-49239aa2dd2c	8f0fd729-6473-4e77-ae36-aa74515b6d1f	2025-04-22 18:06:21.309371+00	2025-04-22 18:06:21.309371+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	42.118.113.33	\N
41e0cd66-e1df-4b0e-8bff-2ecde6c22bd5	8f0fd729-6473-4e77-ae36-aa74515b6d1f	2025-04-22 18:18:56.927879+00	2025-04-22 18:18:56.927879+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	42.118.113.33	\N
270dc795-bc38-47d1-9c8d-bdc9ead3943e	a00da32b-0a91-494d-96c8-60510882f102	2025-04-23 05:16:52.010575+00	2025-04-23 05:16:52.010575+00	\N	aal1	\N	\N	node	118.69.30.98	\N
7fd4521e-6f55-45dc-96df-97c5fea58bd9	4517b4f5-464f-48f0-b2b2-b76ad02036b6	2025-04-20 07:15:04.258508+00	2025-04-24 18:38:23.911186+00	\N	aal1	\N	2025-04-24 18:38:23.910455	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	116.105.209.143	\N
b41d841e-e768-4510-871f-0430e30a1b50	8f0fd729-6473-4e77-ae36-aa74515b6d1f	2025-04-22 18:27:02.628947+00	2025-04-25 20:30:05.920804+00	\N	aal1	\N	2025-04-25 20:30:05.920712	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36 Edg/135.0.0.0	171.225.185.85	\N
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	30c4c4e0-7273-4fa0-914c-f744c346df71	authenticated	authenticated	zok210305@gmail.com	$2a$10$TOzBCALiM7sUbOT2AjelsOnMm6LPkuii4U1H1GBvjGOoNscn/UFRO	2025-03-15 18:22:06.13243+00	\N		\N		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-03-15 18:22:06.109075+00	2025-03-15 18:22:06.133289+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	a8051eb1-0c97-47da-b8b6-80875654adf0	authenticated	authenticated	boizbjp@gmail.com	$2a$10$2uI8m5MzDZ0ErmV05ZpE3uZN/rSNwQFMWnJKAQYHM1ezEmvVsurtW	2025-04-19 03:30:02.693626+00	\N		2025-04-18 15:37:45.036801+00		\N			\N	2025-04-19 03:30:02.706458+00	{"provider": "email", "providers": ["email"]}	{"sub": "a8051eb1-0c97-47da-b8b6-80875654adf0", "email": "boizbjp@gmail.com", "email_verified": true, "phone_verified": false}	\N	2025-04-18 15:37:45.031055+00	2025-04-19 03:30:02.720195+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	ff4f1ddf-1f06-456a-a748-ea951e2ec5be	authenticated	authenticated	3@gmail.com	$2a$10$fgnqpzhctCyE9tNSvEqKdujIJRlhOCgFNNVLUu04TU6HXegdgOBIS	2025-04-25 17:57:03.268112+00	\N		\N		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-04-25 17:57:03.259621+00	2025-04-25 17:57:03.26966+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	71ee08d2-ee66-443b-a86a-b3803d949d53	authenticated	authenticated	admin@example.com	$2a$10$bXz4fS9rkT3huryO.970Ae/ba3FMpLhEtgXbUY/TvyVhHFzgNQb8a	2025-04-17 09:43:18.869595+00	\N		\N		\N			\N	2025-04-22 07:52:23.391852+00	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-04-17 09:43:18.866072+00	2025-04-22 07:52:23.395791+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	7700f576-95af-401d-be7d-f9f96de03d4c	authenticated	authenticated	maiphuocminhtai21032005@gmail.com	$2a$10$0PEKwp1EJpmDH9jdHv8B1eFRkWxQ4GOH6T7weEJuu7rnmGFI0gwdi	\N	\N	470d11f0095d63eca46ca8d1414ab9595bbec493494e5ec14a980a4f	2025-04-21 06:38:59.017828+00		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"sub": "7700f576-95af-401d-be7d-f9f96de03d4c", "email": "maiphuocminhtai21032005@gmail.com", "email_verified": false, "phone_verified": false}	\N	2025-04-21 06:38:58.979759+00	2025-04-21 06:39:01.540222+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	ad1ea3cd-4fcc-4a82-9149-229aea625199	authenticated	authenticated	gerray@duck.com	$2a$10$LveSR.xiJNW1Rt5JmCXrR.f.j8D7lSuLDUxcvIIJruMk6VCZ3Omaa	\N	\N	3841ba0abef4ff6771c201bbd93c581a468640061544325c2d05d3f3	2025-04-18 15:37:31.535304+00		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"sub": "ad1ea3cd-4fcc-4a82-9149-229aea625199", "email": "gerray@duck.com", "email_verified": false, "phone_verified": false}	\N	2025-04-18 15:37:31.529505+00	2025-04-18 15:37:33.511432+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	7fa01997-d8a9-4305-9964-f5cc4b8fc28d	authenticated	authenticated	1@gmail.com	$2a$10$OKPN0OI/w1Of2IhJDsBNYeoyTx4KfwQ.m.XydxTZvkU7qbAEyKooS	2025-04-25 17:56:14.308857+00	\N		\N		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-04-25 17:56:14.256112+00	2025-04-25 17:56:14.317556+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	99f07dd1-4f07-4f1a-97b2-d12c5c50e1ff	authenticated	authenticated	taigazoroa111@gmail.com	$2a$10$h5TeUFEfbhEfHRH/cg76k.W23.5ujg8ckCqCegDIv8YV1lUo7YQKe	\N	\N	1353cc7a716325153398a4106b4ea0e117e83098863ac857246e8202	2025-04-21 15:58:36.91747+00		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"sub": "99f07dd1-4f07-4f1a-97b2-d12c5c50e1ff", "email": "taigazoroa111@gmail.com", "email_verified": false, "phone_verified": false}	\N	2025-04-21 15:58:36.880704+00	2025-04-21 15:58:38.731729+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	3030c7ff-72c2-4049-92a6-2335d74edd46	authenticated	authenticated	2@gmail.com	$2a$10$uYgWtWHFrRyhxlydlYu3PeNBZiAjP6oqhJWlLqIr4GIDnjtu4cqyC	2025-04-25 17:56:57.841288+00	\N		\N		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-04-25 17:56:57.827061+00	2025-04-25 17:56:57.842783+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	a00da32b-0a91-494d-96c8-60510882f102	authenticated	authenticated	admin@jobfit.com	$2a$06$9hiXEc.fuXWlSTJnLARx4Ot1VJE2VIB4AuONKD3TwmbxOwPMlCbeS	2025-04-22 13:27:31.005922+00	\N		\N		\N			\N	2025-04-23 05:16:52.009135+00	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-04-22 13:27:30.966745+00	2025-04-23 05:16:52.037864+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	authenticated	authenticated	employer1@example.com	$2a$10$OXQGdIiYpRAcIl5Ix6PpKOJAC2fAq5JQKiGtD6S1AfYgWqAqqKS16	2025-04-17 09:43:07.650917+00	\N		\N		\N			\N	2025-04-22 07:57:21.226413+00	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-04-17 09:43:07.647892+00	2025-04-22 07:57:21.228803+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	4517b4f5-464f-48f0-b2b2-b76ad02036b6	authenticated	authenticated	employee1@example.com	$2a$10$Z63bOk7ExArb4m5BgaSgkOGyDIeHKofrHrE1gnAsrLjoCJaQWyQwa	2025-04-17 09:42:54.890636+00	\N		\N		\N			\N	2025-04-20 07:15:04.258436+00	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-04-17 09:42:54.884075+00	2025-04-24 18:38:23.892646+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	b7de65ea-4c13-46e0-86e1-f2809c659cfc	authenticated	authenticated	employee@jobfit.com	$2a$06$wRWZo6OtRxrqOcTJYPuzf.booce/Hxibx3n3Bx/V4JFwpjiTIVASe	2025-04-22 13:27:54.554288+00	\N		\N		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-04-22 13:27:54.549718+00	2025-04-22 13:27:54.555014+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	ea0c502c-134d-4ce8-b84b-970eca5cc7a6	authenticated	authenticated	5@gmail.com	$2a$10$nSF1GYgW8Qb5w4RLftKv0ekqPnwxTX9cm9oiffMULRK5c7oSpz99S	2025-04-25 17:57:18.859741+00	\N		\N		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-04-25 17:57:18.852066+00	2025-04-25 17:57:18.860552+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	8f0fd729-6473-4e77-ae36-aa74515b6d1f	authenticated	authenticated	employer@jobfit.com	$2a$06$2EAAg3ITFc1kfqzDOSqqpO4YRVFL9u7QrpmqGYo3Vvl9MlhM0pUy.	2025-04-22 13:27:43.409581+00	\N		\N		\N			\N	2025-04-22 18:27:02.628858+00	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-04-22 13:27:43.404664+00	2025-04-25 20:30:05.902046+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	bf76ffd2-b2bc-42a5-8fed-79eeb919a754	authenticated	authenticated	4@gmail.com	$2a$10$2cNjFBEUBRQXeKgKbbxR7.qIbCInt5paaYq9oNRD3bTENt8hcBFbK	2025-04-25 17:57:10.484364+00	\N		\N		\N			\N	\N	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-04-25 17:57:10.478736+00	2025-04-25 17:57:10.485071+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: job_application_history; Type: TABLE DATA; Schema: job_domain; Owner: postgres
--

COPY job_domain.job_application_history (id, application_id, status, notes, created_at) FROM stdin;
\.


--
-- Data for Name: job_applications; Type: TABLE DATA; Schema: job_domain; Owner: postgres
--

COPY job_domain.job_applications (id, job_id, user_id, resume_id, status, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: job_descriptions; Type: TABLE DATA; Schema: job_domain; Owner: postgres
--

COPY job_domain.job_descriptions (id, job_id, description, salary_min, salary_max, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: job_skills; Type: TABLE DATA; Schema: job_domain; Owner: postgres
--

COPY job_domain.job_skills (id, job_id, skill_name) FROM stdin;
\.


--
-- Data for Name: jobs; Type: TABLE DATA; Schema: job_domain; Owner: postgres
--

COPY job_domain.jobs (id, title, company, location, description, job_type, is_remote, experience_level, posted_by, is_active, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: key; Type: TABLE DATA; Schema: pgsodium; Owner: supabase_admin
--

COPY pgsodium.key (id, status, created, expires, key_type, key_id, key_context, name, associated_data, raw_key, raw_key_nonce, parent_key, comment, user_data) FROM stdin;
\.


--
-- Data for Name: permissions; Type: TABLE DATA; Schema: rbac; Owner: postgres
--

COPY rbac.permissions (id, type, object, created_at, updated_at, deleted_at) FROM stdin;
\.


--
-- Data for Name: role_permissions; Type: TABLE DATA; Schema: rbac; Owner: postgres
--

COPY rbac.role_permissions (role_id, permission_id, created_at, updated_at, deleted_at) FROM stdin;
\.


--
-- Data for Name: roles; Type: TABLE DATA; Schema: rbac; Owner: postgres
--

COPY rbac.roles (id, name, description, active, created_at, updated_at, deleted_at) FROM stdin;
3ab8fff2-4f67-4359-9a29-9feac4bba14c	admin	Administrator with full access to all features	t	2025-04-22 13:33:02.787689+00	\N	\N
6cf7324b-c093-4120-9a89-1a1d67be26be	employee	Employee with limited access	t	2025-04-22 13:33:02.787689+00	\N	\N
c59997a8-6815-4962-b334-47726ca59156	employer	Employer with access to manage job listings	t	2025-04-22 13:33:02.787689+00	\N	\N
\.


--
-- Data for Name: user_roles; Type: TABLE DATA; Schema: rbac; Owner: postgres
--

COPY rbac.user_roles (user_id, role_id, created_at, updated_at, deleted_at) FROM stdin;
a00da32b-0a91-494d-96c8-60510882f102	3ab8fff2-4f67-4359-9a29-9feac4bba14c	2025-04-22 13:45:50.976149+00	\N	\N
8f0fd729-6473-4e77-ae36-aa74515b6d1f	c59997a8-6815-4962-b334-47726ca59156	2025-04-22 13:45:50.976149+00	\N	\N
b7de65ea-4c13-46e0-86e1-f2809c659cfc	6cf7324b-c093-4120-9a89-1a1d67be26be	2025-04-22 13:45:50.976149+00	\N	\N
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2025-03-15 18:05:34
20211116045059	2025-03-15 18:05:34
20211116050929	2025-03-15 18:05:34
20211116051442	2025-03-15 18:05:34
20211116212300	2025-03-15 18:05:34
20211116213355	2025-03-15 18:05:34
20211116213934	2025-03-15 18:05:34
20211116214523	2025-03-15 18:05:34
20211122062447	2025-03-15 18:05:34
20211124070109	2025-03-15 18:05:34
20211202204204	2025-03-15 18:05:34
20211202204605	2025-03-15 18:05:34
20211210212804	2025-03-15 18:05:34
20211228014915	2025-03-15 18:05:34
20220107221237	2025-03-15 18:05:34
20220228202821	2025-03-15 18:05:34
20220312004840	2025-03-15 18:05:34
20220603231003	2025-03-15 18:05:34
20220603232444	2025-03-15 18:05:34
20220615214548	2025-03-15 18:05:34
20220712093339	2025-03-15 18:05:34
20220908172859	2025-03-15 18:05:34
20220916233421	2025-03-15 18:05:34
20230119133233	2025-03-15 18:05:34
20230128025114	2025-03-15 18:05:34
20230128025212	2025-03-15 18:05:34
20230227211149	2025-03-15 18:05:34
20230228184745	2025-03-15 18:05:34
20230308225145	2025-03-15 18:05:34
20230328144023	2025-03-15 18:05:34
20231018144023	2025-03-15 18:05:34
20231204144023	2025-03-15 18:05:34
20231204144024	2025-03-15 18:05:34
20231204144025	2025-03-15 18:05:34
20240108234812	2025-03-15 18:05:34
20240109165339	2025-03-15 18:05:34
20240227174441	2025-03-15 18:05:34
20240311171622	2025-03-15 18:05:34
20240321100241	2025-03-15 18:05:34
20240401105812	2025-03-15 18:05:34
20240418121054	2025-03-15 18:05:34
20240523004032	2025-03-15 18:05:34
20240618124746	2025-03-15 18:05:34
20240801235015	2025-03-15 18:05:34
20240805133720	2025-03-15 18:05:34
20240827160934	2025-03-15 18:05:34
20240919163303	2025-03-15 18:05:34
20240919163305	2025-03-15 18:05:34
20241019105805	2025-03-15 18:05:34
20241030150047	2025-03-15 18:05:34
20241108114728	2025-03-15 18:05:34
20241121104152	2025-03-15 18:05:34
20241130184212	2025-03-15 18:05:34
20241220035512	2025-03-15 18:05:34
20241220123912	2025-03-15 18:05:34
20241224161212	2025-03-15 18:05:34
20250107150512	2025-03-15 18:05:34
20250110162412	2025-03-15 18:05:34
20250123174212	2025-03-15 18:05:34
20250128220012	2025-03-15 18:05:34
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: resume_education; Type: TABLE DATA; Schema: resume_domain; Owner: postgres
--

COPY resume_domain.resume_education (resume_id, institute, degree, field_of_study, start_date, end_date, is_current, description, id) FROM stdin;
c7b8e9f0-1a2b-4c3d-8e4f-5a6b7c8d9e0f	University of Technology	Bachelor of Science	Computer Science	2018-09-01	2022-05-15	f	Graduated with honors, GPA 3.8/4.0	e0001
c7b8e9f0-1a2b-4c3d-8e4f-5a6b7c8d9e0f	Online Academy	Certificate	Web Development	2022-06-10	2022-12-15	f	Intensive full-stack development bootcamp	e0002
d8c9f0a1-2b3c-4d4e-9f5a-6b7c8d9e0f1a	University of Technology	Bachelor of Science	Computer Science	2018-09-01	2022-05-15	f	Graduated with honors, GPA 3.8/4.0	e0003
f0e1b2c3-4d5e-6f6a-1b7c-8d9e0f1a2b3c	Data Science Institute	Master of Science	Data Science	2020-09-01	2022-05-20	f	Thesis on machine learning applications in healthcare	e0004
f0e1b2c3-4d5e-6f6a-1b7c-8d9e0f1a2b3c	State University	Bachelor of Science	Mathematics	2016-09-01	2020-05-15	f	Minor in Computer Science, GPA 3.9/4.0	e0005
a1f2c3d4-5e6f-7a7b-2c8d-9e0f1a2b3c4d	State University	Bachelor of Science	Mathematics	2016-09-01	2020-05-15	f	Minor in Computer Science, GPA 3.9/4.0	e0006
b2a3d4e5-6f7a-8b8c-3d9e-0f1a2b3c4d5e	Design Academy	Bachelor of Arts	Graphic Design	2019-09-01	2023-05-10	f	Specialized in UX/UI design	e0007
d4c5f6a7-8b9c-0d0e-5f1a-2b3c4d5e6f7a	Business School	Master of Business Administration	Product Management	2021-09-01	2023-05-25	f	Focus on technology product management	e0008
d4c5f6a7-8b9c-0d0e-5f1a-2b3c4d5e6f7a	City University	Bachelor of Science	Business Administration	2017-09-01	2021-05-15	f	Minor in Information Systems	e0009
a7f8c9d0-1e2f-3a3b-8c4d-5e6f7a8b9c0d	Tech Institute	Bachelor of Science	Software Engineering	2019-09-01	2023-05-20	f	Specialized in backend development	e0010
b8a9d0e1-2f3a-4b4c-9d5e-6f7a8b9c0d1e	Art Institute	Bachelor of Fine Arts	Interactive Design	2017-09-01	2021-05-15	f	Focus on frontend development and UI design	e0011
b8a9d0e1-2f3a-4b4c-9d5e-6f7a8b9c0d1e	Online Learning Platform	Certificate	React Development	2021-06-15	2021-09-20	f	Advanced React and Redux techniques	e0012
d0c1f2a3-4b5c-6d6e-1f7a-8b9c0d1e2f3a	Engineering University	Master of Science	DevOps Engineering	2020-09-01	2022-05-15	f	Thesis on continuous integration/deployment practices	e0013
d0c1f2a3-4b5c-6d6e-1f7a-8b9c0d1e2f3a	Tech College	Bachelor of Science	Computer Engineering	2016-09-01	2020-05-20	f	Minor in Cloud Computing	e0014
e1d2a3b4-5c6d-7e7f-2a8b-9c0d1e2f3a4b	Quality Assurance Institute	Certificate	Software Testing	2022-01-10	2022-04-15	f	ISTQB certification included	e0015
e1d2a3b4-5c6d-7e7f-2a8b-9c0d1e2f3a4b	State University	Bachelor of Science	Information Technology	2019-09-01	2023-05-15	f	Focus on quality assurance methodologies	e0016
a3f4c5d6-7e8f-9a9b-4c0d-1e2f3a4b5c6d	Programming Institute	Master of Science	Software Development	2019-09-01	2021-05-20	f	Full stack development specialization	e0017
a3f4c5d6-7e8f-9a9b-4c0d-1e2f3a4b5c6d	Tech University	Bachelor of Science	Computer Science	2015-09-01	2019-05-15	f	Minor in Database Management	e0018
b4a5d6e7-8f9a-0b0c-5d1e-2f3a4b5c6d7e	Mobile Development Academy	Certificate	Android Development	2021-01-10	2021-06-15	f	Kotlin and Java for Android	e0019
b4a5d6e7-8f9a-0b0c-5d1e-2f3a4b5c6d7e	City College	Bachelor of Science	Computer Science	2017-09-01	2021-05-20	f	Focus on mobile application development	e0020
\.


--
-- Data for Name: resume_experience; Type: TABLE DATA; Schema: resume_domain; Owner: postgres
--

COPY resume_domain.resume_experience (resume_id, company, title, start_date, end_date, is_current, description, id) FROM stdin;
c7b8e9f0-1a2b-4c3d-8e4f-5a6b7c8d9e0f	WebSolutions Inc.	Junior Developer	2022-06-01	2025-03-15	t	Developing frontend components using React, collaborating with design team for UI implementation, optimizing application performance, and fixing bugs.	x0001
c7b8e9f0-1a2b-4c3d-8e4f-5a6b7c8d9e0f	Tech Internships Co.	Web Development Intern	2021-06-01	2021-08-31	f	Assisted in developing company website, created responsive designs, learned JavaScript frameworks.	x0002
d8c9f0a1-2b3c-4d4e-9f5a-6b7c8d9e0f1a	WebSolutions Inc.	Junior Developer	2022-06-01	2025-03-15	t	Developing frontend components using React, collaborating with design team for UI implementation.	x0003
f0e1b2c3-4d5e-6f6a-1b7c-8d9e0f1a2b3c	Data Analytics Corp.	Data Analyst	2023-01-15	2025-03-15	t	Analyzing large datasets, creating visualization dashboards, developing predictive models.	x0004
f0e1b2c3-4d5e-6f6a-1b7c-8d9e0f1a2b3c	Research Institute	Data Science Intern	2022-06-01	2022-12-15	f	Assisted research team with data preprocessing and model development.	x0005
a1f2c3d4-5e6f-7a7b-2c8d-9e0f1a2b3c4d	Data Analytics Corp.	Data Analyst	2023-01-15	2025-03-15	t	Analyzing large datasets, creating visualization dashboards, developing predictive models using Python and R.	x0006
b2a3d4e5-6f7a-8b8c-3d9e-0f1a2b3c4d5e	Design Studio	Junior Designer	2023-06-10	2025-03-15	t	Creating user interfaces, conducting user research, developing wireframes and prototypes.	x0007
b2a3d4e5-6f7a-8b8c-3d9e-0f1a2b3c4d5e	Creative Agency	Design Intern	2022-06-01	2022-08-31	f	Assisted senior designers with client projects and learned industry standard tools.	x0008
d4c5f6a7-8b9c-0d0e-5f1a-2b3c4d5e6f7a	Product Innovations	Associate Product Manager	2023-07-01	2025-03-15	t	Managing product roadmap, conducting user interviews, working with development team on implementation.	x0009
d4c5f6a7-8b9c-0d0e-5f1a-2b3c4d5e6f7a	Tech Startup	Product Intern	2022-05-15	2022-08-15	f	Assisted with market research and competitive analysis.	x0010
a7f8c9d0-1e2f-3a3b-8c4d-5e6f7a8b9c0d	Server Solutions	Junior Backend Developer	2023-06-15	2025-03-15	t	Developing and maintaining API endpoints, optimizing database queries, implementing security features.	x0011
b8a9d0e1-2f3a-4b4c-9d5e-6f7a8b9c0d1e	Web Agency	Frontend Engineer	2021-07-01	2025-03-15	t	Building responsive web applications, implementing UI designs, optimizing user experience.	x0012
b8a9d0e1-2f3a-4b4c-9d5e-6f7a8b9c0d1e	Small Business	Freelance Web Developer	2020-05-01	2021-06-30	f	Created and maintained websites for small business clients.	x0013
d0c1f2a3-4b5c-6d6e-1f7a-8b9c0d1e2f3a	Cloud Services Inc.	DevOps Specialist	2022-06-01	2025-03-15	t	Managing CI/CD pipelines, configuring cloud infrastructure, monitoring system performance.	x0014
d0c1f2a3-4b5c-6d6e-1f7a-8b9c0d1e2f3a	IT Solutions	Cloud Engineer Intern	2021-06-01	2021-08-31	f	Assisted with AWS configuration and deployment automation.	x0015
e1d2a3b4-5c6d-7e7f-2a8b-9c0d1e2f3a4b	Quality First	QA Engineer	2023-06-01	2025-03-15	t	Developing test plans, performing manual and automated testing, reporting and tracking bugs.	x0016
a3f4c5d6-7e8f-9a9b-4c0d-1e2f3a4b5c6d	Software Solutions	Full Stack Engineer	2021-06-15	2025-03-15	t	Developing full stack applications using MERN stack, implementing features from design to deployment.	x0017
a3f4c5d6-7e8f-9a9b-4c0d-1e2f3a4b5c6d	Digital Agency	Junior Developer	2019-07-01	2021-06-01	f	Developed web applications and assisted senior developers with complex features.	x0018
b4a5d6e7-8f9a-0b0c-5d1e-2f3a4b5c6d7e	Mobile Applications Inc.	Android Developer	2021-07-15	2025-03-15	t	Developing and maintaining Android applications, implementing new features, optimizing performance.	x0019
b4a5d6e7-8f9a-0b0c-5d1e-2f3a4b5c6d7e	App Studio	Mobile Development Intern	2020-06-01	2020-08-31	f	Assisted in developing mobile applications and fixing bugs.	x0020
\.


--
-- Data for Name: resume_skills; Type: TABLE DATA; Schema: resume_domain; Owner: postgres
--

COPY resume_domain.resume_skills (resume_id, skill_name, proficiency, years_experience, is_current, id) FROM stdin;
c7b8e9f0-1a2b-4c3d-8e4f-5a6b7c8d9e0f	JavaScript	4	2	t	1
c7b8e9f0-1a2b-4c3d-8e4f-5a6b7c8d9e0f	React	4	2	t	2
c7b8e9f0-1a2b-4c3d-8e4f-5a6b7c8d9e0f	HTML	5	3	t	3
c7b8e9f0-1a2b-4c3d-8e4f-5a6b7c8d9e0f	CSS	4	3	t	4
c7b8e9f0-1a2b-4c3d-8e4f-5a6b7c8d9e0f	Git	3	2	t	5
d8c9f0a1-2b3c-4d4e-9f5a-6b7c8d9e0f1a	JavaScript	4	2	t	6
d8c9f0a1-2b3c-4d4e-9f5a-6b7c8d9e0f1a	React	4	2	t	7
d8c9f0a1-2b3c-4d4e-9f5a-6b7c8d9e0f1a	Node.js	3	1	t	8
d8c9f0a1-2b3c-4d4e-9f5a-6b7c8d9e0f1a	MongoDB	2	1	t	9
e9d0a1b2-3c4d-5e5f-0a6b-7c8d9e0f1a2b	JavaScript	4	2	t	10
e9d0a1b2-3c4d-5e5f-0a6b-7c8d9e0f1a2b	React	4	2	t	11
e9d0a1b2-3c4d-5e5f-0a6b-7c8d9e0f1a2b	TypeScript	3	1	t	12
f0e1b2c3-4d5e-6f6a-1b7c-8d9e0f1a2b3c	Python	5	3	t	13
f0e1b2c3-4d5e-6f6a-1b7c-8d9e0f1a2b3c	R	4	2	t	14
f0e1b2c3-4d5e-6f6a-1b7c-8d9e0f1a2b3c	SQL	4	3	t	15
f0e1b2c3-4d5e-6f6a-1b7c-8d9e0f1a2b3c	Machine Learning	4	2	t	16
f0e1b2c3-4d5e-6f6a-1b7c-8d9e0f1a2b3c	Data Visualization	5	3	t	17
a1f2c3d4-5e6f-7a7b-2c8d-9e0f1a2b3c4d	Python	5	3	t	18
a1f2c3d4-5e6f-7a7b-2c8d-9e0f1a2b3c4d	TensorFlow	3	2	t	19
a1f2c3d4-5e6f-7a7b-2c8d-9e0f1a2b3c4d	NumPy	4	3	t	20
a1f2c3d4-5e6f-7a7b-2c8d-9e0f1a2b3c4d	Pandas	5	3	t	21
b2a3d4e5-6f7a-8b8c-3d9e-0f1a2b3c4d5e	Figma	5	2	t	22
b2a3d4e5-6f7a-8b8c-3d9e-0f1a2b3c4d5e	Adobe XD	4	2	t	23
b2a3d4e5-6f7a-8b8c-3d9e-0f1a2b3c4d5e	Sketch	3	1	t	24
b2a3d4e5-6f7a-8b8c-3d9e-0f1a2b3c4d5e	User Research	4	2	t	25
b2a3d4e5-6f7a-8b8c-3d9e-0f1a2b3c4d5e	Prototyping	5	2	t	26
c3b4e5f6-7a8b-9c9d-4e0f-1a2b3c4d5e6f	Figma	5	2	t	27
c3b4e5f6-7a8b-9c9d-4e0f-1a2b3c4d5e6f	UI Design	4	2	t	28
c3b4e5f6-7a8b-9c9d-4e0f-1a2b3c4d5e6f	Wireframing	5	2	t	29
d4c5f6a7-8b9c-0d0e-5f1a-2b3c4d5e6f7a	Product Management	4	3	t	30
d4c5f6a7-8b9c-0d0e-5f1a-2b3c4d5e6f7a	Agile Methodologies	4	3	t	31
d4c5f6a7-8b9c-0d0e-5f1a-2b3c4d5e6f7a	User Stories	5	3	t	32
d4c5f6a7-8b9c-0d0e-5f1a-2b3c4d5e6f7a	Market Research	4	4	t	33
d4c5f6a7-8b9c-0d0e-5f1a-2b3c4d5e6f7a	JIRA	3	2	t	34
e5d6a7b8-9c0d-1e1f-6a2b-3c4d5e6f7a8b	Product Management	4	3	t	35
e5d6a7b8-9c0d-1e1f-6a2b-3c4d5e6f7a8b	Competitive Analysis	5	3	t	36
e5d6a7b8-9c0d-1e1f-6a2b-3c4d5e6f7a8b	Roadmapping	4	2	t	37
a7f8c9d0-1e2f-3a3b-8c4d-5e6f7a8b9c0d	Java	4	3	t	38
a7f8c9d0-1e2f-3a3b-8c4d-5e6f7a8b9c0d	Spring Boot	3	2	t	39
a7f8c9d0-1e2f-3a3b-8c4d-5e6f7a8b9c0d	MySQL	4	3	t	40
a7f8c9d0-1e2f-3a3b-8c4d-5e6f7a8b9c0d	RESTful APIs	5	3	t	41
a7f8c9d0-1e2f-3a3b-8c4d-5e6f7a8b9c0d	Microservices	3	1	t	42
b8a9d0e1-2f3a-4b4c-9d5e-6f7a8b9c0d1e	JavaScript	5	5	t	43
b8a9d0e1-2f3a-4b4c-9d5e-6f7a8b9c0d1e	React	5	4	t	44
b8a9d0e1-2f3a-4b4c-9d5e-6f7a8b9c0d1e	CSS	5	5	t	45
b8a9d0e1-2f3a-4b4c-9d5e-6f7a8b9c0d1e	Responsive Design	5	4	t	46
b8a9d0e1-2f3a-4b4c-9d5e-6f7a8b9c0d1e	Redux	4	3	t	47
c9b0e1f2-3a4b-5c5d-0e6f-7a8b9c0d1e2f	JavaScript	5	5	t	48
c9b0e1f2-3a4b-5c5d-0e6f-7a8b9c0d1e2f	Vue.js	4	2	t	49
c9b0e1f2-3a4b-5c5d-0e6f-7a8b9c0d1e2f	SASS	4	3	t	50
\.


--
-- Data for Name: resumes; Type: TABLE DATA; Schema: resume_domain; Owner: postgres
--

COPY resume_domain.resumes (id, user_id, filename, file_path, file_size, file_type, is_default, parsed, created_at, updated_at) FROM stdin;
c7b8e9f0-1a2b-4c3d-8e4f-5a6b7c8d9e0f	ea0c502c-134d-4ce8-b84b-970eca5cc7a6	john_resume_1.pdf	resumes/john_resume_1.pdf	256000	application/pdf	t	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
d8c9f0a1-2b3c-4d4e-9f5a-6b7c8d9e0f1a	ea0c502c-134d-4ce8-b84b-970eca5cc7a6	john_resume_2.pdf	resumes/john_resume_2.pdf	240000	application/pdf	f	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
e9d0a1b2-3c4d-5e5f-0a6b-7c8d9e0f1a2b	ea0c502c-134d-4ce8-b84b-970eca5cc7a6	john_resume_3.docx	resumes/john_resume_3.docx	180000	application/msword	f	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
f0e1b2c3-4d5e-6f6a-1b7c-8d9e0f1a2b3c	bf76ffd2-b2bc-42a5-8fed-79eeb919a754	jane_resume_1.pdf	resumes/jane_resume_1.pdf	290000	application/pdf	t	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
a1f2c3d4-5e6f-7a7b-2c8d-9e0f1a2b3c4d	bf76ffd2-b2bc-42a5-8fed-79eeb919a754	jane_resume_2.pdf	resumes/jane_resume_2.pdf	275000	application/pdf	f	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
b2a3d4e5-6f7a-8b8c-3d9e-0f1a2b3c4d5e	ff4f1ddf-1f06-456a-a748-ea951e2ec5be	mike_resume_1.pdf	resumes/mike_resume_1.pdf	320000	application/pdf	t	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
c3b4e5f6-7a8b-9c9d-4e0f-1a2b3c4d5e6f	ff4f1ddf-1f06-456a-a748-ea951e2ec5be	mike_resume_2.docx	resumes/mike_resume_2.docx	180000	application/msword	f	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
d4c5f6a7-8b9c-0d0e-5f1a-2b3c4d5e6f7a	3030c7ff-72c2-4049-92a6-2335d74edd46	sarah_resume_1.pdf	resumes/sarah_resume_1.pdf	260000	application/pdf	t	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
e5d6a7b8-9c0d-1e1f-6a2b-3c4d5e6f7a8b	3030c7ff-72c2-4049-92a6-2335d74edd46	sarah_resume_2.pdf	resumes/sarah_resume_2.pdf	250000	application/pdf	f	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
f6e7b8c9-0d1e-2f2a-7b3c-4d5e6f7a8b9c	3030c7ff-72c2-4049-92a6-2335d74edd46	sarah_resume_3.docx	resumes/sarah_resume_3.docx	195000	application/msword	f	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
a7f8c9d0-1e2f-3a3b-8c4d-5e6f7a8b9c0d	7fa01997-d8a9-4305-9964-f5cc4b8fc28d	robert_resume_1.pdf	resumes/robert_resume_1.pdf	270000	application/pdf	t	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
b8a9d0e1-2f3a-4b4c-9d5e-6f7a8b9c0d1e	b7de65ea-4c13-46e0-86e1-f2809c659cfc	emily_resume_1.pdf	resumes/emily_resume_1.pdf	285000	application/pdf	t	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
c9b0e1f2-3a4b-5c5d-0e6f-7a8b9c0d1e2f	b7de65ea-4c13-46e0-86e1-f2809c659cfc	emily_resume_2.pdf	resumes/emily_resume_2.pdf	265000	application/pdf	f	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
d0c1f2a3-4b5c-6d6e-1f7a-8b9c0d1e2f3a	8f0fd729-6473-4e77-ae36-aa74515b6d1f	david_resume_1.pdf	resumes/david_resume_1.pdf	310000	application/pdf	t	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
e1d2a3b4-5c6d-7e7f-2a8b-9c0d1e2f3a4b	a00da32b-0a91-494d-96c8-60510882f102	amanda_resume_1.pdf	resumes/amanda_resume_1.pdf	245000	application/pdf	t	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
f2e3b4c5-6d7e-8f8a-3b9c-0d1e2f3a4b5c	a00da32b-0a91-494d-96c8-60510882f102	amanda_resume_2.docx	resumes/amanda_resume_2.docx	175000	application/msword	f	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
a3f4c5d6-7e8f-9a9b-4c0d-1e2f3a4b5c6d	99f07dd1-4f07-4f1a-97b2-d12c5c50e1ff	jason_resume_1.pdf	resumes/jason_resume_1.pdf	295000	application/pdf	t	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
b4a5d6e7-8f9a-0b0c-5d1e-2f3a4b5c6d7e	7700f576-95af-401d-be7d-f9f96de03d4c	lisa_resume_1.pdf	resumes/lisa_resume_1.pdf	280000	application/pdf	t	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
c5b6e7f8-9a0b-1c1d-6e2f-3a4b5c6d7e8f	7700f576-95af-401d-be7d-f9f96de03d4c	lisa_resume_2.pdf	resumes/lisa_resume_2.pdf	268000	application/pdf	f	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
d6c7f8a9-0b1c-2d2e-7f3a-4b5c6d7e8f9a	a8051eb1-0c97-47da-b8b6-80875654adf0	kevin_resume_1.pdf	resumes/kevin_resume_1.pdf	255000	application/pdf	t	t	2025-04-25 20:03:29.886152+00	2025-04-25 20:03:29.886152+00
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
utils	utils	\N	2025-03-15 18:27:18.027278+00	2025-03-15 18:27:18.027278+00	t	f	\N	\N	\N
resumes	resumes	\N	2025-04-24 19:35:35.730599+00	2025-04-24 19:35:35.730599+00	f	f	\N	\N	\N
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2025-03-15 17:56:24.225935
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2025-03-15 17:56:24.233888
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2025-03-15 17:56:24.236327
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2025-03-15 17:56:24.272604
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2025-03-15 17:56:24.310571
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2025-03-15 17:56:24.31318
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2025-03-15 17:56:24.316047
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2025-03-15 17:56:24.319308
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2025-03-15 17:56:24.32211
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2025-03-15 17:56:24.325168
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2025-03-15 17:56:24.328631
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2025-03-15 17:56:24.332276
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2025-03-15 17:56:24.339799
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2025-03-15 17:56:24.343063
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2025-03-15 17:56:24.347071
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2025-03-15 17:56:24.38049
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2025-03-15 17:56:24.384485
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2025-03-15 17:56:24.387655
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2025-03-15 17:56:24.392785
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2025-03-15 17:56:24.401551
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2025-03-15 17:56:24.410572
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2025-03-15 17:56:24.423698
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2025-03-15 17:56:24.465162
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2025-03-15 17:56:24.4897
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2025-03-15 17:56:24.493337
25	custom-metadata	d974c6057c3db1c1f847afa0e291e6165693b990	2025-03-15 17:56:24.496177
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: admin_permissions; Type: TABLE DATA; Schema: user_domain; Owner: postgres
--

COPY user_domain.admin_permissions (id, user_id, can_manage_users, can_manage_jobs, can_view_analytics, can_manage_settings, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: user_emails; Type: TABLE DATA; Schema: user_domain; Owner: postgres
--

COPY user_domain.user_emails (id, user_id, email, is_primary, verified, created_at) FROM stdin;
\.


--
-- Data for Name: user_phone_numbers; Type: TABLE DATA; Schema: user_domain; Owner: postgres
--

COPY user_domain.user_phone_numbers (id, user_id, phone_number, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: user_profiles; Type: TABLE DATA; Schema: user_domain; Owner: postgres
--

COPY user_domain.user_profiles (id, user_id, profile_picture, first_name, last_name, professional_title, current_position, years_of_experience, desired_salary, remote_preference, created_at, updated_at) FROM stdin;
658088de-9c9d-4f27-b3ec-00ef829d8237	ea0c502c-134d-4ce8-b84b-970eca5cc7a6	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
065f1dea-6d9e-47f5-aef9-d68c18cf6442	bf76ffd2-b2bc-42a5-8fed-79eeb919a754	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
6873c812-b46f-4e57-a3cf-b7e955f6ecda	ff4f1ddf-1f06-456a-a748-ea951e2ec5be	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
682094a7-48e8-44f9-8bde-7e0951e2135d	3030c7ff-72c2-4049-92a6-2335d74edd46	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
e2dc692e-3947-424e-880e-d47cb5ad18bb	7fa01997-d8a9-4305-9964-f5cc4b8fc28d	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
f506c6f5-2f5c-43c1-87cc-af683bbbb572	b7de65ea-4c13-46e0-86e1-f2809c659cfc	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
767abfea-62fa-48da-a198-a848e71f3f0d	8f0fd729-6473-4e77-ae36-aa74515b6d1f	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
eba05cde-6d13-46b3-b5cf-ed0ddbe8823b	a00da32b-0a91-494d-96c8-60510882f102	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
d1110588-7d5b-4605-8bdc-74c8620d7d60	99f07dd1-4f07-4f1a-97b2-d12c5c50e1ff	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
8d09eafa-2f88-4cc5-8aed-7522b02b96d6	7700f576-95af-401d-be7d-f9f96de03d4c	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
b9f62617-d229-4c33-9a6f-669de5daf595	a8051eb1-0c97-47da-b8b6-80875654adf0	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
81463534-40a2-49db-9e5a-2b7fdb17eda5	ad1ea3cd-4fcc-4a82-9149-229aea625199	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
692ac3cc-431a-4e5c-9107-d6523b590077	71ee08d2-ee66-443b-a86a-b3803d949d53	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
ffec02ef-85c4-458d-995c-7c1d0ff302e6	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
467222de-7ce5-472a-9dd6-492c2d8111ec	4517b4f5-464f-48f0-b2b2-b76ad02036b6	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
38ef5e29-88fb-4a3d-a904-66380ad88a89	30c4c4e0-7273-4fa0-914c-f744c346df71	\N	\N	\N	\N	\N	\N	\N	\N	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
\.


--
-- Data for Name: user_security_info; Type: TABLE DATA; Schema: user_domain; Owner: postgres
--

COPY user_domain.user_security_info (id, user_id, mfa_secret, mfa_recovery_codes, mfa_enabled, mfa_method, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: user_settings; Type: TABLE DATA; Schema: user_domain; Owner: postgres
--

COPY user_domain.user_settings (id, user_id, email_notifications, job_alert_notifications, resume_viewed, language, profile_visibility, created_at, updated_at) FROM stdin;
47072aba-71c1-418f-a2ce-38030f13e779	ea0c502c-134d-4ce8-b84b-970eca5cc7a6	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
0c889bc7-3ce2-428e-9a42-95c4275273ab	bf76ffd2-b2bc-42a5-8fed-79eeb919a754	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
b8e6ead6-1c18-47f9-8c4a-d777079322ae	ff4f1ddf-1f06-456a-a748-ea951e2ec5be	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
f0ecad7e-7433-4906-bdce-e0999c336d00	3030c7ff-72c2-4049-92a6-2335d74edd46	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
6bab9599-a46f-474f-93f9-8598aa23ba92	7fa01997-d8a9-4305-9964-f5cc4b8fc28d	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
602a9af4-d04e-495a-9a33-1c9407715e36	b7de65ea-4c13-46e0-86e1-f2809c659cfc	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
d82e93be-69cc-43f1-a93d-1d8888f0a277	8f0fd729-6473-4e77-ae36-aa74515b6d1f	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
8b84c138-dbd8-42a8-a8c5-b453949a861a	a00da32b-0a91-494d-96c8-60510882f102	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
c229d69e-9dc6-4f06-87ba-34cdf4a0681d	99f07dd1-4f07-4f1a-97b2-d12c5c50e1ff	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
f8aca3e0-8ce8-46d1-9242-8bfdca2565b0	7700f576-95af-401d-be7d-f9f96de03d4c	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
f0496477-86db-4bb9-8bb4-c38765f04cfc	a8051eb1-0c97-47da-b8b6-80875654adf0	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
c1e73a79-7442-4e9e-910e-c5e768d3b7b2	ad1ea3cd-4fcc-4a82-9149-229aea625199	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
d25280aa-9712-4c40-b416-3b8a841af381	71ee08d2-ee66-443b-a86a-b3803d949d53	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
24a2cf60-cb68-4ebe-9cbd-74d34f4f07c8	22a5ca99-76ed-4c7a-aad9-b39e1df25b16	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
b593b4f0-c26e-4ced-aaf1-b03f3b63c2c6	4517b4f5-464f-48f0-b2b2-b76ad02036b6	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
ea859601-51d3-4adf-8b54-4b6d2f8e5a3e	30c4c4e0-7273-4fa0-914c-f744c346df71	t	t	t	en	public	2025-04-25 19:05:12.977111+00	2025-04-25 19:05:12.977111+00
\.


--
-- Data for Name: user_skills; Type: TABLE DATA; Schema: user_domain; Owner: postgres
--

COPY user_domain.user_skills (id, user_id, skill_name, skill_level, years_experience, created_at) FROM stdin;
\.


--
-- Data for Name: user_social_logins; Type: TABLE DATA; Schema: user_domain; Owner: postgres
--

COPY user_domain.user_social_logins (id, user_id, provider_id, provider, created_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: user_domain; Owner: postgres
--

COPY user_domain.users (id, username, role, is_enabled, is_active, last_login, created_at, updated_at) FROM stdin;
ea0c502c-134d-4ce8-b84b-970eca5cc7a6	johndoe	employee	t	t	2025-03-15 09:30:00+00	2025-01-10 14:25:00+00	2025-03-20 16:45:00+00
bf76ffd2-b2bc-42a5-8fed-79eeb919a754	janedoe	employee	t	t	2025-03-18 14:20:00+00	2025-01-12 09:15:00+00	2025-03-21 10:30:00+00
ff4f1ddf-1f06-456a-a748-ea951e2ec5be	mikesmith	employee	t	t	2025-03-17 11:45:00+00	2025-01-15 16:40:00+00	2025-03-19 13:20:00+00
3030c7ff-72c2-4049-92a6-2335d74edd46	sarahlee	employee	t	t	2025-03-16 08:10:00+00	2025-01-18 11:30:00+00	2025-03-18 09:15:00+00
7fa01997-d8a9-4305-9964-f5cc4b8fc28d	robertjones	employee	t	t	2025-03-14 15:50:00+00	2025-01-20 13:45:00+00	2025-03-17 14:30:00+00
b7de65ea-4c13-46e0-86e1-f2809c659cfc	emilybrown	employee	t	t	2025-03-19 10:25:00+00	2025-01-22 10:20:00+00	2025-03-22 11:40:00+00
8f0fd729-6473-4e77-ae36-aa74515b6d1f	davidwilson	employee	t	t	2025-03-13 12:15:00+00	2025-01-25 08:10:00+00	2025-03-16 15:55:00+00
a00da32b-0a91-494d-96c8-60510882f102	amandaclark	employee	t	t	2025-03-20 09:40:00+00	2025-01-28 15:35:00+00	2025-03-23 08:25:00+00
99f07dd1-4f07-4f1a-97b2-d12c5c50e1ff	jasonwright	employee	t	t	2025-03-12 16:30:00+00	2025-01-30 12:50:00+00	2025-03-15 17:10:00+00
7700f576-95af-401d-be7d-f9f96de03d4c	lisataylor	employee	t	t	2025-03-11 14:55:00+00	2025-02-02 09:25:00+00	2025-03-14 12:35:00+00
a8051eb1-0c97-47da-b8b6-80875654adf0	kevinmiller	employee	t	t	2025-03-21 13:05:00+00	2025-02-05 14:40:00+00	2025-03-24 10:15:00+00
ad1ea3cd-4fcc-4a82-9149-229aea625199	rachelwhite	employee	t	t	2025-03-10 10:20:00+00	2025-02-08 11:15:00+00	2025-03-13 16:50:00+00
71ee08d2-ee66-443b-a86a-b3803d949d53	chrishill	employee	t	t	2025-03-22 08:35:00+00	2025-02-10 16:30:00+00	2025-03-25 09:05:00+00
22a5ca99-76ed-4c7a-aad9-b39e1df25b16	lauraking	employee	t	t	2025-03-09 15:45:00+00	2025-02-12 13:55:00+00	2025-03-12 11:20:00+00
4517b4f5-464f-48f0-b2b2-b76ad02036b6	brandonlewis	employee	t	t	2025-03-23 12:25:00+00	2025-02-15 09:20:00+00	2025-03-26 14:40:00+00
30c4c4e0-7273-4fa0-914c-f744c346df71	juliagreen	employee	t	t	2025-03-08 11:10:00+00	2025-02-18 15:45:00+00	2025-03-11 13:30:00+00
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 46, true);


--
-- Name: key_key_id_seq; Type: SEQUENCE SET; Schema: pgsodium; Owner: supabase_admin
--

SELECT pg_catalog.setval('pgsodium.key_key_id_seq', 1, false);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: job_application_history job_application_history_pkey; Type: CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.job_application_history
    ADD CONSTRAINT job_application_history_pkey PRIMARY KEY (id);


--
-- Name: job_applications job_applications_pkey; Type: CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.job_applications
    ADD CONSTRAINT job_applications_pkey PRIMARY KEY (id);


--
-- Name: job_descriptions job_descriptions_pkey; Type: CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.job_descriptions
    ADD CONSTRAINT job_descriptions_pkey PRIMARY KEY (id);


--
-- Name: job_skills job_skills_pkey; Type: CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.job_skills
    ADD CONSTRAINT job_skills_pkey PRIMARY KEY (id);


--
-- Name: jobs jobs_pkey; Type: CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.jobs
    ADD CONSTRAINT jobs_pkey PRIMARY KEY (id);


--
-- Name: permissions permissions_pkey; Type: CONSTRAINT; Schema: rbac; Owner: postgres
--

ALTER TABLE ONLY rbac.permissions
    ADD CONSTRAINT permissions_pkey PRIMARY KEY (id);


--
-- Name: role_permissions role_permissions_pkey; Type: CONSTRAINT; Schema: rbac; Owner: postgres
--

ALTER TABLE ONLY rbac.role_permissions
    ADD CONSTRAINT role_permissions_pkey PRIMARY KEY (role_id, permission_id);


--
-- Name: roles roles_pkey; Type: CONSTRAINT; Schema: rbac; Owner: postgres
--

ALTER TABLE ONLY rbac.roles
    ADD CONSTRAINT roles_pkey PRIMARY KEY (id);


--
-- Name: user_roles user_roles_pkey; Type: CONSTRAINT; Schema: rbac; Owner: postgres
--

ALTER TABLE ONLY rbac.user_roles
    ADD CONSTRAINT user_roles_pkey PRIMARY KEY (user_id, role_id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: resume_education resume_education_pkey; Type: CONSTRAINT; Schema: resume_domain; Owner: postgres
--

ALTER TABLE ONLY resume_domain.resume_education
    ADD CONSTRAINT resume_education_pkey PRIMARY KEY (resume_id, id);


--
-- Name: resume_experience resume_experience_pkey; Type: CONSTRAINT; Schema: resume_domain; Owner: postgres
--

ALTER TABLE ONLY resume_domain.resume_experience
    ADD CONSTRAINT resume_experience_pkey PRIMARY KEY (resume_id, id);


--
-- Name: resume_skills resume_skills_pkey; Type: CONSTRAINT; Schema: resume_domain; Owner: postgres
--

ALTER TABLE ONLY resume_domain.resume_skills
    ADD CONSTRAINT resume_skills_pkey PRIMARY KEY (resume_id, id);


--
-- Name: resumes resumes_pkey; Type: CONSTRAINT; Schema: resume_domain; Owner: postgres
--

ALTER TABLE ONLY resume_domain.resumes
    ADD CONSTRAINT resumes_pkey PRIMARY KEY (id);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: admin_permissions admin_permissions_pkey; Type: CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.admin_permissions
    ADD CONSTRAINT admin_permissions_pkey PRIMARY KEY (id);


--
-- Name: user_emails user_emails_email_key; Type: CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_emails
    ADD CONSTRAINT user_emails_email_key UNIQUE (email);


--
-- Name: user_emails user_emails_pkey; Type: CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_emails
    ADD CONSTRAINT user_emails_pkey PRIMARY KEY (id);


--
-- Name: user_phone_numbers user_phone_numbers_pkey; Type: CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_phone_numbers
    ADD CONSTRAINT user_phone_numbers_pkey PRIMARY KEY (id);


--
-- Name: user_profiles user_profiles_pkey; Type: CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_profiles
    ADD CONSTRAINT user_profiles_pkey PRIMARY KEY (id);


--
-- Name: user_security_info user_security_info_pkey; Type: CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_security_info
    ADD CONSTRAINT user_security_info_pkey PRIMARY KEY (id);


--
-- Name: user_settings user_settings_pkey; Type: CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_settings
    ADD CONSTRAINT user_settings_pkey PRIMARY KEY (id);


--
-- Name: user_skills user_skills_pkey; Type: CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_skills
    ADD CONSTRAINT user_skills_pkey PRIMARY KEY (id);


--
-- Name: user_social_logins user_social_logins_pkey; Type: CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_social_logins
    ADD CONSTRAINT user_social_logins_pkey PRIMARY KEY (id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: users users_username_key; Type: CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.users
    ADD CONSTRAINT users_username_key UNIQUE (username);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: idx_job_application_history_app_id; Type: INDEX; Schema: job_domain; Owner: postgres
--

CREATE INDEX idx_job_application_history_app_id ON job_domain.job_application_history USING btree (application_id);


--
-- Name: idx_job_applications_job_id; Type: INDEX; Schema: job_domain; Owner: postgres
--

CREATE INDEX idx_job_applications_job_id ON job_domain.job_applications USING btree (job_id);


--
-- Name: idx_job_applications_resume_id; Type: INDEX; Schema: job_domain; Owner: postgres
--

CREATE INDEX idx_job_applications_resume_id ON job_domain.job_applications USING btree (resume_id);


--
-- Name: idx_job_applications_user_id; Type: INDEX; Schema: job_domain; Owner: postgres
--

CREATE INDEX idx_job_applications_user_id ON job_domain.job_applications USING btree (user_id);


--
-- Name: idx_job_descriptions_job_id; Type: INDEX; Schema: job_domain; Owner: postgres
--

CREATE INDEX idx_job_descriptions_job_id ON job_domain.job_descriptions USING btree (job_id);


--
-- Name: idx_job_skills_job_id; Type: INDEX; Schema: job_domain; Owner: postgres
--

CREATE INDEX idx_job_skills_job_id ON job_domain.job_skills USING btree (job_id);


--
-- Name: idx_jobs_active; Type: INDEX; Schema: job_domain; Owner: postgres
--

CREATE INDEX idx_jobs_active ON job_domain.jobs USING btree (is_active);


--
-- Name: idx_jobs_experience; Type: INDEX; Schema: job_domain; Owner: postgres
--

CREATE INDEX idx_jobs_experience ON job_domain.jobs USING btree (experience_level);


--
-- Name: idx_jobs_posted_by; Type: INDEX; Schema: job_domain; Owner: postgres
--

CREATE INDEX idx_jobs_posted_by ON job_domain.jobs USING btree (posted_by);


--
-- Name: idx_jobs_type; Type: INDEX; Schema: job_domain; Owner: postgres
--

CREATE INDEX idx_jobs_type ON job_domain.jobs USING btree (job_type);


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: idx_resume_education_resume_id; Type: INDEX; Schema: resume_domain; Owner: postgres
--

CREATE INDEX idx_resume_education_resume_id ON resume_domain.resume_education USING btree (resume_id);


--
-- Name: idx_resume_experience_resume_id; Type: INDEX; Schema: resume_domain; Owner: postgres
--

CREATE INDEX idx_resume_experience_resume_id ON resume_domain.resume_experience USING btree (resume_id);


--
-- Name: idx_resume_skills_resume_id; Type: INDEX; Schema: resume_domain; Owner: postgres
--

CREATE INDEX idx_resume_skills_resume_id ON resume_domain.resume_skills USING btree (resume_id);


--
-- Name: idx_resumes_user_id; Type: INDEX; Schema: resume_domain; Owner: postgres
--

CREATE INDEX idx_resumes_user_id ON resume_domain.resumes USING btree (user_id);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: idx_admin_permissions_user_id; Type: INDEX; Schema: user_domain; Owner: postgres
--

CREATE INDEX idx_admin_permissions_user_id ON user_domain.admin_permissions USING btree (user_id);


--
-- Name: idx_user_emails_user_id; Type: INDEX; Schema: user_domain; Owner: postgres
--

CREATE INDEX idx_user_emails_user_id ON user_domain.user_emails USING btree (user_id);


--
-- Name: idx_user_phone_numbers_user_id; Type: INDEX; Schema: user_domain; Owner: postgres
--

CREATE INDEX idx_user_phone_numbers_user_id ON user_domain.user_phone_numbers USING btree (user_id);


--
-- Name: idx_user_profiles_user_id; Type: INDEX; Schema: user_domain; Owner: postgres
--

CREATE INDEX idx_user_profiles_user_id ON user_domain.user_profiles USING btree (user_id);


--
-- Name: idx_user_security_info_user_id; Type: INDEX; Schema: user_domain; Owner: postgres
--

CREATE INDEX idx_user_security_info_user_id ON user_domain.user_security_info USING btree (user_id);


--
-- Name: idx_user_settings_user_id; Type: INDEX; Schema: user_domain; Owner: postgres
--

CREATE INDEX idx_user_settings_user_id ON user_domain.user_settings USING btree (user_id);


--
-- Name: idx_user_skills_user_id; Type: INDEX; Schema: user_domain; Owner: postgres
--

CREATE INDEX idx_user_skills_user_id ON user_domain.user_skills USING btree (user_id);


--
-- Name: idx_user_social_logins_user_id; Type: INDEX; Schema: user_domain; Owner: postgres
--

CREATE INDEX idx_user_social_logins_user_id ON user_domain.user_social_logins USING btree (user_id);


--
-- Name: idx_users_role; Type: INDEX; Schema: user_domain; Owner: postgres
--

CREATE INDEX idx_users_role ON user_domain.users USING btree (role);


--
-- Name: users on_auth_user_created; Type: TRIGGER; Schema: auth; Owner: supabase_auth_admin
--

CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


--
-- Name: job_applications enforce_job_applicant_role; Type: TRIGGER; Schema: job_domain; Owner: postgres
--

CREATE TRIGGER enforce_job_applicant_role BEFORE INSERT OR UPDATE ON job_domain.job_applications FOR EACH ROW EXECUTE FUNCTION job_domain.check_job_applicant_role();


--
-- Name: jobs enforce_job_poster_role; Type: TRIGGER; Schema: job_domain; Owner: postgres
--

CREATE TRIGGER enforce_job_poster_role BEFORE INSERT OR UPDATE ON job_domain.jobs FOR EACH ROW EXECUTE FUNCTION job_domain.check_job_poster_role();


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: admin_permissions enforce_admin_role; Type: TRIGGER; Schema: user_domain; Owner: postgres
--

CREATE TRIGGER enforce_admin_role BEFORE INSERT OR UPDATE ON user_domain.admin_permissions FOR EACH ROW EXECUTE FUNCTION user_domain.check_admin_role();


--
-- Name: users on_user_created; Type: TRIGGER; Schema: user_domain; Owner: postgres
--

CREATE TRIGGER on_user_created AFTER INSERT ON user_domain.users FOR EACH ROW EXECUTE FUNCTION user_domain.create_user_profile();


--
-- Name: users on_user_created_settings; Type: TRIGGER; Schema: user_domain; Owner: postgres
--

CREATE TRIGGER on_user_created_settings AFTER INSERT ON user_domain.users FOR EACH ROW EXECUTE FUNCTION user_domain.create_user_settings();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: job_application_history job_application_history_application_id_fkey; Type: FK CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.job_application_history
    ADD CONSTRAINT job_application_history_application_id_fkey FOREIGN KEY (application_id) REFERENCES job_domain.job_applications(id) ON DELETE CASCADE;


--
-- Name: job_applications job_applications_job_id_fkey; Type: FK CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.job_applications
    ADD CONSTRAINT job_applications_job_id_fkey FOREIGN KEY (job_id) REFERENCES job_domain.jobs(id) ON DELETE CASCADE;


--
-- Name: job_applications job_applications_resume_id_fkey; Type: FK CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.job_applications
    ADD CONSTRAINT job_applications_resume_id_fkey FOREIGN KEY (resume_id) REFERENCES resume_domain.resumes(id);


--
-- Name: job_applications job_applications_user_id_fkey; Type: FK CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.job_applications
    ADD CONSTRAINT job_applications_user_id_fkey FOREIGN KEY (user_id) REFERENCES user_domain.users(id) ON DELETE CASCADE;


--
-- Name: job_descriptions job_descriptions_job_id_fkey; Type: FK CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.job_descriptions
    ADD CONSTRAINT job_descriptions_job_id_fkey FOREIGN KEY (job_id) REFERENCES job_domain.jobs(id) ON DELETE CASCADE;


--
-- Name: job_skills job_skills_job_id_fkey; Type: FK CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.job_skills
    ADD CONSTRAINT job_skills_job_id_fkey FOREIGN KEY (job_id) REFERENCES job_domain.jobs(id) ON DELETE CASCADE;


--
-- Name: jobs jobs_posted_by_fkey; Type: FK CONSTRAINT; Schema: job_domain; Owner: postgres
--

ALTER TABLE ONLY job_domain.jobs
    ADD CONSTRAINT jobs_posted_by_fkey FOREIGN KEY (posted_by) REFERENCES user_domain.users(id);


--
-- Name: role_permissions role_permissions_permission_id_fkey; Type: FK CONSTRAINT; Schema: rbac; Owner: postgres
--

ALTER TABLE ONLY rbac.role_permissions
    ADD CONSTRAINT role_permissions_permission_id_fkey FOREIGN KEY (permission_id) REFERENCES rbac.permissions(id);


--
-- Name: role_permissions role_permissions_role_id_fkey; Type: FK CONSTRAINT; Schema: rbac; Owner: postgres
--

ALTER TABLE ONLY rbac.role_permissions
    ADD CONSTRAINT role_permissions_role_id_fkey FOREIGN KEY (role_id) REFERENCES rbac.roles(id);


--
-- Name: user_roles user_roles_role_id_fkey; Type: FK CONSTRAINT; Schema: rbac; Owner: postgres
--

ALTER TABLE ONLY rbac.user_roles
    ADD CONSTRAINT user_roles_role_id_fkey FOREIGN KEY (role_id) REFERENCES rbac.roles(id);


--
-- Name: user_roles user_roles_user_id_fkey; Type: FK CONSTRAINT; Schema: rbac; Owner: postgres
--

ALTER TABLE ONLY rbac.user_roles
    ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: resume_education resume_education_resume_id_fkey; Type: FK CONSTRAINT; Schema: resume_domain; Owner: postgres
--

ALTER TABLE ONLY resume_domain.resume_education
    ADD CONSTRAINT resume_education_resume_id_fkey FOREIGN KEY (resume_id) REFERENCES resume_domain.resumes(id) ON DELETE CASCADE;


--
-- Name: resume_experience resume_experience_resume_id_fkey; Type: FK CONSTRAINT; Schema: resume_domain; Owner: postgres
--

ALTER TABLE ONLY resume_domain.resume_experience
    ADD CONSTRAINT resume_experience_resume_id_fkey FOREIGN KEY (resume_id) REFERENCES resume_domain.resumes(id) ON DELETE CASCADE;


--
-- Name: resume_skills resume_skills_resume_id_fkey; Type: FK CONSTRAINT; Schema: resume_domain; Owner: postgres
--

ALTER TABLE ONLY resume_domain.resume_skills
    ADD CONSTRAINT resume_skills_resume_id_fkey FOREIGN KEY (resume_id) REFERENCES resume_domain.resumes(id) ON DELETE CASCADE;


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: admin_permissions admin_permissions_user_id_fkey; Type: FK CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.admin_permissions
    ADD CONSTRAINT admin_permissions_user_id_fkey FOREIGN KEY (user_id) REFERENCES user_domain.users(id) ON DELETE CASCADE;


--
-- Name: user_emails user_emails_user_id_fkey; Type: FK CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_emails
    ADD CONSTRAINT user_emails_user_id_fkey FOREIGN KEY (user_id) REFERENCES user_domain.users(id) ON DELETE CASCADE;


--
-- Name: user_phone_numbers user_phone_numbers_user_id_fkey; Type: FK CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_phone_numbers
    ADD CONSTRAINT user_phone_numbers_user_id_fkey FOREIGN KEY (user_id) REFERENCES user_domain.users(id) ON DELETE CASCADE;


--
-- Name: user_profiles user_profiles_user_id_fkey; Type: FK CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_profiles
    ADD CONSTRAINT user_profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES user_domain.users(id) ON DELETE CASCADE;


--
-- Name: user_security_info user_security_info_user_id_fkey; Type: FK CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_security_info
    ADD CONSTRAINT user_security_info_user_id_fkey FOREIGN KEY (user_id) REFERENCES user_domain.users(id) ON DELETE CASCADE;


--
-- Name: user_settings user_settings_user_id_fkey; Type: FK CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_settings
    ADD CONSTRAINT user_settings_user_id_fkey FOREIGN KEY (user_id) REFERENCES user_domain.users(id) ON DELETE CASCADE;


--
-- Name: user_skills user_skills_user_id_fkey; Type: FK CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_skills
    ADD CONSTRAINT user_skills_user_id_fkey FOREIGN KEY (user_id) REFERENCES user_domain.users(id) ON DELETE CASCADE;


--
-- Name: user_social_logins user_social_logins_user_id_fkey; Type: FK CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.user_social_logins
    ADD CONSTRAINT user_social_logins_user_id_fkey FOREIGN KEY (user_id) REFERENCES user_domain.users(id) ON DELETE CASCADE;


--
-- Name: users users_id_fkey; Type: FK CONSTRAINT; Schema: user_domain; Owner: postgres
--

ALTER TABLE ONLY user_domain.users
    ADD CONSTRAINT users_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id);


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: jobs admins can manage all jobs; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "admins can manage all jobs" ON job_domain.jobs USING ((EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'admin'::user_domain.user_role)))));


--
-- Name: jobs anyone can view active jobs; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "anyone can view active jobs" ON job_domain.jobs FOR SELECT USING ((is_active = true));


--
-- Name: job_descriptions anyone can view job descriptions; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "anyone can view job descriptions" ON job_domain.job_descriptions FOR SELECT USING ((EXISTS ( SELECT 1
   FROM job_domain.jobs j
  WHERE ((j.id = job_descriptions.job_id) AND (j.is_active = true)))));


--
-- Name: job_skills anyone can view job skills; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "anyone can view job skills" ON job_domain.job_skills FOR SELECT USING (true);


--
-- Name: job_applications employees can submit applications; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "employees can submit applications" ON job_domain.job_applications FOR INSERT WITH CHECK (((auth.uid() = user_id) AND (EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'employee'::user_domain.user_role))))));


--
-- Name: job_application_history employers can manage application history; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "employers can manage application history" ON job_domain.job_application_history USING ((EXISTS ( SELECT 1
   FROM (job_domain.job_applications ja
     JOIN job_domain.jobs j ON ((ja.job_id = j.id)))
  WHERE ((ja.id = job_application_history.application_id) AND (j.posted_by = auth.uid())))));


--
-- Name: job_descriptions employers can manage their job descriptions; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "employers can manage their job descriptions" ON job_domain.job_descriptions USING ((EXISTS ( SELECT 1
   FROM job_domain.jobs j
  WHERE ((j.id = job_descriptions.job_id) AND (j.posted_by = auth.uid())))));


--
-- Name: job_skills employers can manage their job skills; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "employers can manage their job skills" ON job_domain.job_skills USING ((EXISTS ( SELECT 1
   FROM job_domain.jobs j
  WHERE ((j.id = job_skills.job_id) AND (j.posted_by = auth.uid())))));


--
-- Name: jobs employers can manage their own job posts; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "employers can manage their own job posts" ON job_domain.jobs USING (((auth.uid() = posted_by) AND (EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND ((u.role = 'employer'::user_domain.user_role) OR (u.role = 'admin'::user_domain.user_role)))))));


--
-- Name: job_applications employers can see applications for their jobs; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "employers can see applications for their jobs" ON job_domain.job_applications FOR SELECT USING ((EXISTS ( SELECT 1
   FROM job_domain.jobs j
  WHERE ((j.id = job_applications.job_id) AND (j.posted_by = auth.uid())))));


--
-- Name: job_application_history; Type: ROW SECURITY; Schema: job_domain; Owner: postgres
--

ALTER TABLE job_domain.job_application_history ENABLE ROW LEVEL SECURITY;

--
-- Name: job_applications; Type: ROW SECURITY; Schema: job_domain; Owner: postgres
--

ALTER TABLE job_domain.job_applications ENABLE ROW LEVEL SECURITY;

--
-- Name: job_descriptions; Type: ROW SECURITY; Schema: job_domain; Owner: postgres
--

ALTER TABLE job_domain.job_descriptions ENABLE ROW LEVEL SECURITY;

--
-- Name: job_skills; Type: ROW SECURITY; Schema: job_domain; Owner: postgres
--

ALTER TABLE job_domain.job_skills ENABLE ROW LEVEL SECURITY;

--
-- Name: jobs; Type: ROW SECURITY; Schema: job_domain; Owner: postgres
--

ALTER TABLE job_domain.jobs ENABLE ROW LEVEL SECURITY;

--
-- Name: job_application_history users can see their application history; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "users can see their application history" ON job_domain.job_application_history FOR SELECT USING ((EXISTS ( SELECT 1
   FROM job_domain.job_applications ja
  WHERE ((ja.id = job_application_history.application_id) AND (ja.user_id = auth.uid())))));


--
-- Name: job_applications users can see their own applications; Type: POLICY; Schema: job_domain; Owner: postgres
--

CREATE POLICY "users can see their own applications" ON job_domain.job_applications FOR SELECT USING ((auth.uid() = user_id));


--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: resumes admins can manage all resumes; Type: POLICY; Schema: resume_domain; Owner: postgres
--

CREATE POLICY "admins can manage all resumes" ON resume_domain.resumes USING ((EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'admin'::user_domain.user_role)))));


--
-- Name: resume_education employers can view education for job applications; Type: POLICY; Schema: resume_domain; Owner: postgres
--

CREATE POLICY "employers can view education for job applications" ON resume_domain.resume_education FOR SELECT USING ((EXISTS ( SELECT 1
   FROM ((resume_domain.resumes r
     JOIN job_domain.job_applications ja ON ((r.id = ja.resume_id)))
     JOIN job_domain.jobs j ON ((ja.job_id = j.id)))
  WHERE ((r.id = ja.resume_id) AND (j.posted_by = auth.uid())))));


--
-- Name: resume_experience employers can view experience for job applications; Type: POLICY; Schema: resume_domain; Owner: postgres
--

CREATE POLICY "employers can view experience for job applications" ON resume_domain.resume_experience FOR SELECT USING ((EXISTS ( SELECT 1
   FROM ((resume_domain.resumes r
     JOIN job_domain.job_applications ja ON ((r.id = ja.resume_id)))
     JOIN job_domain.jobs j ON ((ja.job_id = j.id)))
  WHERE ((r.id = ja.resume_id) AND (j.posted_by = auth.uid())))));


--
-- Name: resumes employers can view resumes for their posted jobs; Type: POLICY; Schema: resume_domain; Owner: postgres
--

CREATE POLICY "employers can view resumes for their posted jobs" ON resume_domain.resumes FOR SELECT USING ((EXISTS ( SELECT 1
   FROM (job_domain.job_applications ja
     JOIN job_domain.jobs j ON ((ja.job_id = j.id)))
  WHERE ((ja.resume_id = resumes.id) AND (j.posted_by = auth.uid())))));


--
-- Name: resume_skills employers can view skills for job applications; Type: POLICY; Schema: resume_domain; Owner: postgres
--

CREATE POLICY "employers can view skills for job applications" ON resume_domain.resume_skills FOR SELECT USING ((EXISTS ( SELECT 1
   FROM ((resume_domain.resumes r
     JOIN job_domain.job_applications ja ON ((r.id = ja.resume_id)))
     JOIN job_domain.jobs j ON ((ja.job_id = j.id)))
  WHERE ((r.id = ja.resume_id) AND (j.posted_by = auth.uid())))));


--
-- Name: resume_education; Type: ROW SECURITY; Schema: resume_domain; Owner: postgres
--

ALTER TABLE resume_domain.resume_education ENABLE ROW LEVEL SECURITY;

--
-- Name: resume_experience; Type: ROW SECURITY; Schema: resume_domain; Owner: postgres
--

ALTER TABLE resume_domain.resume_experience ENABLE ROW LEVEL SECURITY;

--
-- Name: resume_skills; Type: ROW SECURITY; Schema: resume_domain; Owner: postgres
--

ALTER TABLE resume_domain.resume_skills ENABLE ROW LEVEL SECURITY;

--
-- Name: resumes; Type: ROW SECURITY; Schema: resume_domain; Owner: postgres
--

ALTER TABLE resume_domain.resumes ENABLE ROW LEVEL SECURITY;

--
-- Name: resume_education users can manage their own education entries; Type: POLICY; Schema: resume_domain; Owner: postgres
--

CREATE POLICY "users can manage their own education entries" ON resume_domain.resume_education USING ((EXISTS ( SELECT 1
   FROM resume_domain.resumes r
  WHERE ((r.id = resume_education.resume_id) AND (r.user_id = auth.uid())))));


--
-- Name: resume_experience users can manage their own experience entries; Type: POLICY; Schema: resume_domain; Owner: postgres
--

CREATE POLICY "users can manage their own experience entries" ON resume_domain.resume_experience USING ((EXISTS ( SELECT 1
   FROM resume_domain.resumes r
  WHERE ((r.id = resume_experience.resume_id) AND (r.user_id = auth.uid())))));


--
-- Name: resume_skills users can manage their own resume skills; Type: POLICY; Schema: resume_domain; Owner: postgres
--

CREATE POLICY "users can manage their own resume skills" ON resume_domain.resume_skills USING ((EXISTS ( SELECT 1
   FROM resume_domain.resumes r
  WHERE ((r.id = resume_skills.resume_id) AND (r.user_id = auth.uid())))));


--
-- Name: resumes users can manage their own resumes; Type: POLICY; Schema: resume_domain; Owner: postgres
--

CREATE POLICY "users can manage their own resumes" ON resume_domain.resumes USING ((auth.uid() = user_id));


--
-- Name: objects Users can read their own resumes; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Users can read their own resumes" ON storage.objects FOR SELECT USING (((bucket_id = 'resumes'::text) AND ((auth.uid())::text = (storage.foldername(name))[1])));


--
-- Name: objects Users can update/delete their own resumes; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Users can update/delete their own resumes" ON storage.objects FOR UPDATE USING (((bucket_id = 'resumes'::text) AND ((auth.uid())::text = (storage.foldername(name))[1])));


--
-- Name: objects Users can upload their own resumes; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "Users can upload their own resumes" ON storage.objects FOR INSERT WITH CHECK (((bucket_id = 'resumes'::text) AND ((auth.uid())::text = (storage.foldername(name))[1])));


--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: objects employers can read resumes for job applications; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "employers can read resumes for job applications" ON storage.objects FOR SELECT USING (((bucket_id = 'resumes'::text) AND (EXISTS ( SELECT 1
   FROM ((resume_domain.resumes r
     JOIN job_domain.job_applications ja ON ((r.id = ja.resume_id)))
     JOIN job_domain.jobs j ON ((ja.job_id = j.id)))
  WHERE ((r.file_path = objects.name) AND (j.posted_by = auth.uid()))))));


--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: objects users can read their own resumes; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "users can read their own resumes" ON storage.objects FOR SELECT USING (((bucket_id = 'resumes'::text) AND ((auth.uid())::text = (storage.foldername(name))[1])));


--
-- Name: objects users can update/delete their own resumes; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "users can update/delete their own resumes" ON storage.objects FOR UPDATE USING (((bucket_id = 'resumes'::text) AND ((auth.uid())::text = (storage.foldername(name))[1])));


--
-- Name: objects users can upload their own resumes; Type: POLICY; Schema: storage; Owner: supabase_storage_admin
--

CREATE POLICY "users can upload their own resumes" ON storage.objects FOR INSERT WITH CHECK (((bucket_id = 'resumes'::text) AND ((auth.uid())::text = (storage.foldername(name))[1])));


--
-- Name: admin_permissions; Type: ROW SECURITY; Schema: user_domain; Owner: postgres
--

ALTER TABLE user_domain.admin_permissions ENABLE ROW LEVEL SECURITY;

--
-- Name: user_emails admins can manage all emails; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "admins can manage all emails" ON user_domain.user_emails USING ((EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'admin'::user_domain.user_role)))));


--
-- Name: user_phone_numbers admins can manage all phone numbers; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "admins can manage all phone numbers" ON user_domain.user_phone_numbers USING ((EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'admin'::user_domain.user_role)))));


--
-- Name: user_profiles admins can manage all profiles; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "admins can manage all profiles" ON user_domain.user_profiles USING ((EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'admin'::user_domain.user_role)))));


--
-- Name: user_security_info admins can manage all security info; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "admins can manage all security info" ON user_domain.user_security_info USING ((EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'admin'::user_domain.user_role)))));


--
-- Name: user_settings admins can manage all settings; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "admins can manage all settings" ON user_domain.user_settings USING ((EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'admin'::user_domain.user_role)))));


--
-- Name: user_skills admins can manage all skills; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "admins can manage all skills" ON user_domain.user_skills USING ((EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'admin'::user_domain.user_role)))));


--
-- Name: user_social_logins admins can manage all social logins; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "admins can manage all social logins" ON user_domain.user_social_logins USING ((EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'admin'::user_domain.user_role)))));


--
-- Name: admin_permissions admins can manage permissions; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "admins can manage permissions" ON user_domain.admin_permissions USING ((EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'admin'::user_domain.user_role)))));


--
-- Name: users admins have full access to users; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "admins have full access to users" ON user_domain.users USING ((EXISTS ( SELECT 1
   FROM user_domain.users u
  WHERE ((u.id = auth.uid()) AND (u.role = 'admin'::user_domain.user_role)))));


--
-- Name: user_profiles anyone can view published profiles; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "anyone can view published profiles" ON user_domain.user_profiles FOR SELECT USING ((EXISTS ( SELECT 1
   FROM user_domain.user_settings s
  WHERE ((s.user_id = user_profiles.user_id) AND (s.profile_visibility = 'public'::text)))));


--
-- Name: user_skills anyone can view skills; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "anyone can view skills" ON user_domain.user_skills FOR SELECT USING (true);


--
-- Name: user_emails; Type: ROW SECURITY; Schema: user_domain; Owner: postgres
--

ALTER TABLE user_domain.user_emails ENABLE ROW LEVEL SECURITY;

--
-- Name: user_phone_numbers; Type: ROW SECURITY; Schema: user_domain; Owner: postgres
--

ALTER TABLE user_domain.user_phone_numbers ENABLE ROW LEVEL SECURITY;

--
-- Name: user_profiles; Type: ROW SECURITY; Schema: user_domain; Owner: postgres
--

ALTER TABLE user_domain.user_profiles ENABLE ROW LEVEL SECURITY;

--
-- Name: user_security_info; Type: ROW SECURITY; Schema: user_domain; Owner: postgres
--

ALTER TABLE user_domain.user_security_info ENABLE ROW LEVEL SECURITY;

--
-- Name: user_settings; Type: ROW SECURITY; Schema: user_domain; Owner: postgres
--

ALTER TABLE user_domain.user_settings ENABLE ROW LEVEL SECURITY;

--
-- Name: user_skills; Type: ROW SECURITY; Schema: user_domain; Owner: postgres
--

ALTER TABLE user_domain.user_skills ENABLE ROW LEVEL SECURITY;

--
-- Name: user_social_logins; Type: ROW SECURITY; Schema: user_domain; Owner: postgres
--

ALTER TABLE user_domain.user_social_logins ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: user_domain; Owner: postgres
--

ALTER TABLE user_domain.users ENABLE ROW LEVEL SECURITY;

--
-- Name: user_emails users can manage their own emails; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "users can manage their own emails" ON user_domain.user_emails USING ((auth.uid() = user_id));


--
-- Name: user_phone_numbers users can manage their own phone numbers; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "users can manage their own phone numbers" ON user_domain.user_phone_numbers USING ((auth.uid() = user_id));


--
-- Name: user_profiles users can manage their own profiles; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "users can manage their own profiles" ON user_domain.user_profiles USING ((auth.uid() = user_id));


--
-- Name: user_security_info users can manage their own security info; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "users can manage their own security info" ON user_domain.user_security_info USING ((auth.uid() = user_id));


--
-- Name: user_settings users can manage their own settings; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "users can manage their own settings" ON user_domain.user_settings USING ((auth.uid() = user_id));


--
-- Name: user_skills users can manage their own skills; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "users can manage their own skills" ON user_domain.user_skills USING ((auth.uid() = user_id));


--
-- Name: user_social_logins users can manage their own social logins; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "users can manage their own social logins" ON user_domain.user_social_logins USING ((auth.uid() = user_id));


--
-- Name: users users can update their own data; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "users can update their own data" ON user_domain.users FOR UPDATE USING ((auth.uid() = id));


--
-- Name: users users can view their own data; Type: POLICY; Schema: user_domain; Owner: postgres
--

CREATE POLICY "users can view their own data" ON user_domain.users FOR SELECT USING ((auth.uid() = id));


--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT ALL ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;
GRANT USAGE ON SCHEMA public TO supabase_auth_admin;


--
-- Name: SCHEMA rbac; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA rbac TO supabase_auth_admin;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT ALL ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: SCHEMA vault; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA vault TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;
GRANT ALL ON FUNCTION auth.email() TO postgres;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;
GRANT ALL ON FUNCTION auth.role() TO postgres;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;
GRANT ALL ON FUNCTION auth.uid() TO postgres;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM postgres;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO postgres;


--
-- Name: FUNCTION crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_decrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea); Type: ACL; Schema: pgsodium; Owner: pgsodium_keymaker
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_encrypt(message bytea, additional bytea, key_uuid uuid, nonce bytea) TO service_role;


--
-- Name: FUNCTION crypto_aead_det_keygen(); Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON FUNCTION pgsodium.crypto_aead_det_keygen() TO service_role;


--
-- Name: FUNCTION create_profile_for_user(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.create_profile_for_user() TO anon;
GRANT ALL ON FUNCTION public.create_profile_for_user() TO authenticated;
GRANT ALL ON FUNCTION public.create_profile_for_user() TO service_role;


--
-- Name: FUNCTION custom_access_token_hook(event jsonb); Type: ACL; Schema: public; Owner: postgres
--

REVOKE ALL ON FUNCTION public.custom_access_token_hook(event jsonb) FROM PUBLIC;
GRANT ALL ON FUNCTION public.custom_access_token_hook(event jsonb) TO service_role;
GRANT ALL ON FUNCTION public.custom_access_token_hook(event jsonb) TO supabase_auth_admin;


--
-- Name: FUNCTION get_user_followers_count(user_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_user_followers_count(user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_user_followers_count(user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_user_followers_count(user_id uuid) TO service_role;


--
-- Name: FUNCTION get_user_following_count(user_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_user_following_count(user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_user_following_count(user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_user_following_count(user_id uuid) TO service_role;


--
-- Name: FUNCTION get_user_posts_count(user_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_user_posts_count(user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_user_posts_count(user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_user_posts_count(user_id uuid) TO service_role;


--
-- Name: FUNCTION get_users_with_roles(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_users_with_roles() TO anon;
GRANT ALL ON FUNCTION public.get_users_with_roles() TO authenticated;
GRANT ALL ON FUNCTION public.get_users_with_roles() TO service_role;


--
-- Name: FUNCTION handle_new_user(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.handle_new_user() TO anon;
GRANT ALL ON FUNCTION public.handle_new_user() TO authenticated;
GRANT ALL ON FUNCTION public.handle_new_user() TO service_role;


--
-- Name: FUNCTION log_user_action(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.log_user_action() TO anon;
GRANT ALL ON FUNCTION public.log_user_action() TO authenticated;
GRANT ALL ON FUNCTION public.log_user_action() TO service_role;


--
-- Name: FUNCTION toggle_like(post_id integer); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.toggle_like(post_id integer) TO anon;
GRANT ALL ON FUNCTION public.toggle_like(post_id integer) TO authenticated;
GRANT ALL ON FUNCTION public.toggle_like(post_id integer) TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO postgres;
GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO dashboard_user;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION send(payload jsonb, event text, topic text, private boolean); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO postgres;
GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO dashboard_user;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: FUNCTION can_insert_object(bucketid text, name text, owner uuid, metadata jsonb); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) TO postgres;


--
-- Name: FUNCTION extension(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.extension(name text) TO postgres;


--
-- Name: FUNCTION filename(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.filename(name text) TO postgres;


--
-- Name: FUNCTION foldername(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.foldername(name text) TO postgres;


--
-- Name: FUNCTION get_size_by_bucket(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.get_size_by_bucket() TO postgres;


--
-- Name: FUNCTION list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) TO postgres;


--
-- Name: FUNCTION list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) TO postgres;


--
-- Name: FUNCTION operation(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.operation() TO postgres;


--
-- Name: FUNCTION search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) TO postgres;


--
-- Name: FUNCTION update_updated_at_column(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.update_updated_at_column() TO postgres;


--
-- Name: FUNCTION _crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION create_secret(new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.create_secret(new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.schema_migrations TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.schema_migrations TO postgres;
GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: TABLE decrypted_key; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.decrypted_key TO pgsodium_keyholder;


--
-- Name: TABLE masking_rule; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.masking_rule TO pgsodium_keyholder;


--
-- Name: TABLE mask_columns; Type: ACL; Schema: pgsodium; Owner: supabase_admin
--

GRANT ALL ON TABLE pgsodium.mask_columns TO pgsodium_keyholder;


--
-- Name: TABLE permissions; Type: ACL; Schema: rbac; Owner: postgres
--

GRANT ALL ON TABLE rbac.permissions TO supabase_auth_admin;


--
-- Name: TABLE role_permissions; Type: ACL; Schema: rbac; Owner: postgres
--

GRANT ALL ON TABLE rbac.role_permissions TO supabase_auth_admin;


--
-- Name: TABLE roles; Type: ACL; Schema: rbac; Owner: postgres
--

GRANT ALL ON TABLE rbac.roles TO supabase_auth_admin;


--
-- Name: TABLE user_roles; Type: ACL; Schema: rbac; Owner: postgres
--

GRANT ALL ON TABLE rbac.user_roles TO supabase_auth_admin;


--
-- Name: TABLE user_permissions; Type: ACL; Schema: rbac; Owner: postgres
--

GRANT ALL ON TABLE rbac.user_permissions TO supabase_auth_admin;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE migrations; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.migrations TO anon;
GRANT ALL ON TABLE storage.migrations TO authenticated;
GRANT ALL ON TABLE storage.migrations TO service_role;
GRANT ALL ON TABLE storage.migrations TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;
GRANT ALL ON TABLE storage.s3_multipart_uploads TO postgres;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;
GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO postgres;


--
-- Name: TABLE secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,DELETE ON TABLE vault.secrets TO postgres WITH GRANT OPTION;


--
-- Name: TABLE decrypted_secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,DELETE ON TABLE vault.decrypted_secrets TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON SEQUENCES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium GRANT ALL ON TABLES  TO pgsodium_keyholder;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON SEQUENCES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON FUNCTIONS  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: pgsodium_masks; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA pgsodium_masks GRANT ALL ON TABLES  TO pgsodium_keyiduser;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: postgres
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO postgres;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

