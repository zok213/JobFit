import React, { useEffect, useState } from "react";
import { createChat } from "@n8n/chat";

interface ChatWidgetProps {
  webhookUrl?: string;
  title?: string;
  subtitle?: string;
  inputPlaceholder?: string;
  customClass?: string;
  role?: "general" | "employer" | "employee";
  customMessages?: string[];
}

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho chatInstance
interface ChatInstance {
  destroy?: () => void;
  [key: string]: any;
}

export const ChatWidget: React.FC<ChatWidgetProps> = ({
  webhookUrl = "https://jobfit-api.vercel.app/api/chat", // S·ª≠ d·ª•ng webhook d·ª± ph√≤ng l√†m m·∫∑c ƒë·ªãnh
  title = "JobFit Assistant",
  subtitle = "Hello! How can I help you today?",
  inputPlaceholder = "Type your question...",
  customClass = "",
  role = "general",
  customMessages,
}) => {
  const [isClient, setIsClient] = useState(false);
  const [connectionError, setConnectionError] = useState(false);
  const [retryCount, setRetryCount] = useState(0);
  const maxRetries = 3; // TƒÉng s·ªë l·∫ßn th·ª≠ k·∫øt n·ªëi

  // Danh s√°ch c√°c webhook d·ª± ph√≤ng
  const fallbackWebhooks = [
    "https://jobfit-api.vercel.app/api/chat",
    "https://jobfit-backend.onrender.com/api/chat", // Th√™m webhook d·ª± ph√≤ng th·ª© hai
    "https://api.jobfit.ai/chat", // Th√™m webhook d·ª± ph√≤ng th·ª© ba
  ];

  // Ch·ªçn webhook URL d·ª±a tr√™n s·ªë l·∫ßn th·ª≠ l·∫°i
  const getWebhookUrl = () => {
    // N·∫øu ƒë√£ c√≥ l·ªói k·∫øt n·ªëi, s·ª≠ d·ª•ng webhook d·ª± ph√≤ng theo th·ª© t·ª±
    if (connectionError) {
      const fallbackIndex = retryCount % fallbackWebhooks.length;
      return fallbackWebhooks[fallbackIndex];
    }

    // N·∫øu webhook ban ƒë·∫ßu ch·ª©a n8n.cloud (c√≥ th·ªÉ kh√¥ng ·ªïn ƒë·ªãnh), s·ª≠ d·ª•ng fallback ƒë·∫ßu ti√™n
    if (webhookUrl.includes("n8n.cloud")) {
      return fallbackWebhooks[0];
    }

    // S·ª≠ d·ª•ng webhook ƒë∆∞·ª£c cung c·∫•p
    return webhookUrl;
  };

  const getInitialMessages = () => {
    if (customMessages && customMessages.length > 0) {
      return customMessages;
    }

    switch (role) {
      case "employer":
        return [
          "Hello employer! üëã",
          "I'm the JobFit assistant for employers. I can help you create job descriptions, manage candidates, or answer questions about the recruitment process.",
        ];
      case "employee":
        return [
          "Hello! üëã",
          "I'm the JobFit assistant for job seekers. I can help you find suitable jobs, improve your CV, or prepare for interviews.",
        ];
      default:
        return ["Hello! üëã", "I'm the JobFit assistant. How can I help you?"];
    }
  };

  const getFooterText = () => {
    switch (role) {
      case "employer":
        return "Powered by JobFit AI for Employers";
      case "employee":
        return "Powered by JobFit AI for Job Seekers";
      default:
        return "Powered by JobFit AI";
    }
  };

  useEffect(() => {
    setIsClient(true);
    let chatInstance: ChatInstance | null = null;

    if (typeof window !== "undefined") {
      // Add custom CSS variables for lime green color
      const style = document.createElement("style");
      style.innerHTML = `
        :root {
          --chat--color-primary: #84cc16; /* lime-500 */
          --chat--color-primary-shade-50: #65a30d; /* lime-600 */
          --chat--color-primary-shade-100: #4d7c0f; /* lime-700 */
          --chat--color-secondary: #84cc16; /* lime-500 */
          --chat--color-secondary-shade-50: #65a30d; /* lime-600 */
          --chat--toggle--background: #84cc16; /* lime-500 */
          --chat--toggle--hover--background: #65a30d; /* lime-600 */
          --chat--toggle--active--background: #4d7c0f; /* lime-700 */
          --chat--message--user--background: #84cc16; /* lime-500 */
        }
      `;
      document.head.appendChild(style);

      const initChat = async () => {
        try {
          // X√≥a instance c≈© n·∫øu c√≥
          const chatElement = document.getElementById("n8n-chat");
          if (chatElement) {
            while (chatElement.firstChild) {
              chatElement.removeChild(chatElement.firstChild);
            }
          }

          // Ki·ªÉm tra k·∫øt n·ªëi webhook tr∆∞·ªõc khi kh·ªüi t·∫°o chat
          const currentWebhook = getWebhookUrl();

          // Ki·ªÉm tra endpoint tr∆∞·ªõc khi t·∫°o chat
          try {
            const response = await fetch(currentWebhook, {
              method: "HEAD",
              headers: {
                "Content-Type": "application/json",
              },
              mode: "no-cors", // Cho ph√©p k·∫øt n·ªëi kh√¥ng c·∫ßn CORS
              cache: "no-cache",
            });
            // N·∫øu endpoint kh√¥ng tr·∫£ v·ªÅ l·ªói, ti·∫øp t·ª•c kh·ªüi t·∫°o
          } catch (error) {
            console.warn("Chat endpoint check failed, trying anyway:", error);
            // V·∫´n ti·∫øp t·ª•c v·ªõi vi·ªác kh·ªüi t·∫°o chat
          }

          chatInstance = createChat({
            webhookUrl: currentWebhook,
            mode: "window",
            i18n: {
              en: {
                title,
                subtitle,
                footer: getFooterText(),
                getStarted: "Start conversation",
                inputPlaceholder,
                closeButtonTooltip: "Close",
              },
            },
            initialMessages: getInitialMessages(),
            metadata: {
              // Add metadata to send with each chat request
              source: "jobfit-frontend",
              version: "1.0.0",
              userRole: role,
            },
            loadPreviousSession: false, // T·∫Øt t√≠nh nƒÉng load phi√™n tr∆∞·ªõc ƒë√≥
          });

          setConnectionError(false);
          return true;
        } catch (error) {
          console.error("Error initializing chat widget:", error);
          setConnectionError(true);
          return false;
        }
      };

      // Th·ª≠ kh·ªüi t·∫°o chat
      initChat().then((success) => {
        // N·∫øu th·∫•t b·∫°i v√† ch∆∞a v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ l·∫°i t·ªëi ƒëa, th·ª≠ l·∫°i v·ªõi webhook d·ª± ph√≤ng
        if (!success && retryCount < maxRetries) {
          setRetryCount((prevCount) => prevCount + 1);
          setTimeout(() => {
            initChat();
          }, 2000); // TƒÉng th·ªùi gian ch·ªù l√™n 2 gi√¢y tr∆∞·ªõc khi th·ª≠ l·∫°i
        }
      });

      // Cleanup function
      return () => {
        // Remove style when component unmounts
        if (style.parentNode) {
          document.head.removeChild(style);
        }

        try {
          const chatElement = document.getElementById("n8n-chat");
          if (chatElement) {
            // Remove children from chat container
            while (chatElement.firstChild) {
              chatElement.removeChild(chatElement.firstChild);
            }
          }

          // N·∫øu c√≥ instance v√† c√≥ ph∆∞∆°ng th·ª©c destroy
          if (chatInstance && typeof chatInstance.destroy === "function") {
            chatInstance.destroy();
          }
        } catch (error) {
          console.error("Error cleaning up chat widget:", error);
        }
      };
    }
  }, [
    webhookUrl,
    title,
    subtitle,
    inputPlaceholder,
    role,
    customMessages,
    connectionError,
    retryCount,
  ]);

  // Don't render anything during SSR
  if (!isClient) return null;

  return (
    <div id="n8n-chat" className={customClass}>
      {/* n8n Chat will be automatically inserted here */}
    </div>
  );
};

export default ChatWidget;
